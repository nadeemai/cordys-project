UPDATED CODE 16

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function (Controller, JSONModel, MessageToast, Fragment, MessageBox, formatter) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        formatter: formatter,

        onInit: function () {

            

            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");
            

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var   oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                enableFinalAccount: false,
                enableFinalAccountInput: false,
                sendbackbuttonvisiblity: false,
                enableFinalAccount: false,
                remarkModel: "",
                deleteTabVisible: false,
                approverRequiredVisible: false,
                currentUserRole: "",
                isApproverScreen: false,
                enableRowActionsapproval: false,
                uploadiconvisiblity: false,
                releasebuttonvisibility: false,
                visiblityCostoverWBSCenter: false,
                enableBudgetField: false // Add this line
            });
 
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {};
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");

        },

        // Formatter for subType display
        formatSubType: function (sSubType) {
            var mSubTypeMap = {
                "NR": "New Requirement",
                "CON": "Contingency",
                "ILT": "Interline Transfer",
                "BCF": "Budget Carry-Forward",
                "SAVING": "Savings",
                "ITH": "Interhead Transfer",
                "COR": "Cost Over-Run",
                "PPA": "Preproject Approval",
                "CBCF": "Capex Budget Carry-Forward",
                "OTH": "Others"
            };
            return mSubTypeMap[sSubType] || sSubType || "N/A";
        },
        // formatUserDisplay
        formatUserDisplay: function (uploadedByID, uploadedByName, currentUser) {
            if (uploadedByID && uploadedByName) {
                return uploadedByID + " - " + uploadedByName;
            } else if (currentUser && currentUser.userID && currentUser.name) {
                return currentUser.userID + " - " + currentUser.name;
            } else {
                return "";
            }
        },

        // In your 
        //  function, update the approver visibility logic:
        _onRouteSanctionfdApproved: function (oEvent) {
            
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
        
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
        
            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
        
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";
        
                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", true); 
                        // Handle visibility for Final Accounts stage with Pending status
                        if (that.stagesData === "Final Accounts" && that.statusData === "Pending") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/releasebuttonvisibility", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/isApproverScreen", true);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", true);
                        } else {
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                        }
        
                        // Handle Approver-specific logic - ONLY show for GM PMO stage with COR subtype
                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/sendbackbuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/releasebuttonvisibility", that.stagesData === "Final Accounts");
        
                            // Only show approver field for GM PMO stage with COR subtype
                            var showApproverField = ((that.stagesData === "GM PMO") && that._onSubType === "COR");
                            oViewModel.setProperty("/approverRequiredVisible", showApproverField);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            const approverStages = [
                                "Accounts", "Sr VP FDPD", "CEO", "Final Accounts",
                                "VP CDMM", "VP CME", "VP Finance", "FES CFO",
                                "President", "AFS CFO", "ED", "R1", "R2", "R3",
                                "Approver", "Project Finance Member"
                            ];
                            const showApproverField_afterGmpmo = (
                                approverStages.includes(that.stagesData) &&
                                that._onSubType === "COR" &&
                                that._ApprovedCheck === "Approved"
                            );
        
                            if (showApproverField_afterGmpmo) {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                                oViewModel.setProperty("/isApproverScreen", showApproverField_afterGmpmo);
                            }
        
                            if (that.stagesData === "GM PMO" && that._onSubType === "COR") {
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true);
                            } else {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
        
                        if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
                        that.onGetCurrUserforUploadon();
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetchApprover(reqID);
                        that.onAttchmentDataFetch();
                        var oDate = oData.results[0].ssfdDtl.implDt;
                        if (oDate) {  
                            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                                pattern: "dd-MM-yyyy"
                            });
                            var formattedDate = oDateFormat.format(oDate);
                            that.byId("dateImplement").setValue(formattedDate);
                        }
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function (oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
         
            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";
         
                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", false); 
                        // var isSendBackStatus = ["Sent Back", "Send Back", "SEND BACK"].includes(statusDatacheck);
                        // if (statusDatacheck === "Draft" || !statusDatacheck || isSendBackStatus){
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Sent Back" || statusDatacheck === "Send Back" || statusDatacheck === "SEND BACK" ) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/deleteTabVisible", true); 
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/enableBudgetField", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);

                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/enableBudgetField", false);
                        } else if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/enableBudgetField", false);
                        }
         
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onGetCurrUserforUploadonInitiator();
                        that.onAttchmentDataFetch();
                       
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },
         
         

        _onRouteSanctionfdController: function (oEvent) {
            // Set current date for new requests
            
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);
            oViewModel.setProperty("/uploadiconvisiblity", true);
            // oViewModel.setProperty("/deleteTabVisible", true); 
            // Clear attachments when selecting a new request
            var oAttachmentModel = this.getView().getModel("UploadDocSrvTabData");
            oAttachmentModel.setProperty("/attachments", []);

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oinitDtDate = new Date();
            var formattedInitDate = this.formatDate(oinitDtDate);
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: {
                    subType: this._onSubType,
                    division: "FD",
                    puDept: "",
                    hod: "",
                    loc: "",
                    projName: "",
                    itemRequiredDesc: "",
                    budgetRequired: 0,
                    irr: "",
                    market: "",
                    implDt: null,
                    enggHours: "",
                    remarks: "",
                    background: "",
                    justification: "",
                    deliverables: "",
                    capitalBudget: 0,
                    revenueBudget: 0,
                    personnelCost: 0,
                    selectedApprover: "",
                    initDt: formattedInitDate,
                }
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onGetCurrUserforUploadonInitiator();


        },

        formatDate: function (sDate) {
            if (!sDate) return "";
          
            const date = new Date(sDate);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
          
            return `${day}-${month}-${year}`;
          },
          onBudgetDetailDataFetchApprover: function (reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            var subtype = this._onSubType;
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            sap.ui.core.BusyIndicator.show(0);
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function (oData) {
                    if (oData.items && Array.isArray(oData.items)) {
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                var amount = parseFloat(item.amount || 0);
                                if (item.nature === "Capital Budget" && validSubTypes.includes(subtype) && amount > 0) {
                                    item.contingency = parseFloat((amount * 0.05).toFixed(2));
                                    item.total = parseFloat((amount + item.contingency).toFixed(2));
                                } else {
                                    item.contingency = 0;
                                    item.total = parseFloat(amount.toFixed(2));
                                }
                            }
                        });

                        // Recalculate total row
                        var totalAmount = 0, totalContingency = 0, totalFinal = 0;
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                totalAmount += parseFloat(item.amount || 0);
                                totalContingency += parseFloat(item.contingency || 0);
                                totalFinal += parseFloat(item.total || 0);
                            }
                        });

                        oData.items.forEach(function (item) {
                            if (item.nature === "Total") {
                                item.amount = parseFloat(totalAmount.toFixed(2));
                                item.contingency = parseFloat(totalContingency.toFixed(2));
                                item.total = parseFloat(totalFinal.toFixed(2));
                            }
                        });

                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "budgetModel");
                        that._updateIRREnabledState(totalFinal);
                        var statusDatacheck = that.statusData;
                        if (statusDatacheck === "Pending" || statusDatacheck === "HOD" || statusDatacheck === "Approved" || statusDatacheck === "Released" || statusDatacheck === "Sent Back" || statusDatacheck === "Draft") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", false);
                        }
                    }
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                    MessageToast.show("Failed to fetch budget data.", { position: "bottom center" });
                }
            });
        },
        onBudgetDetailDataFetch: function (reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            var subtype = this._onSubType;
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            sap.ui.core.BusyIndicator.show(0);
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function (oData) {
                    if (oData.items && Array.isArray(oData.items)) {
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                var amount = parseFloat(item.amount || 0);
                                if (item.nature === "Capital Budget" && validSubTypes.includes(subtype) && amount > 0) {
                                    item.contingency = parseFloat((amount * 0.05).toFixed(2));
                                    item.total = parseFloat((amount + item.contingency).toFixed(2));
                                } else {
                                    item.contingency = 0;
                                    item.total = parseFloat(amount.toFixed(2));
                                }
                            }
                        });

                        // Recalculate total row
                        var totalAmount = 0, totalContingency = 0, totalFinal = 0;
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                totalAmount += parseFloat(item.amount || 0);
                                totalContingency += parseFloat(item.contingency || 0);
                                totalFinal += parseFloat(item.total || 0);
                            }
                        });

                        oData.items.forEach(function (item) {
                            if (item.nature === "Total") {
                                item.amount = parseFloat(totalAmount.toFixed(2));
                                item.contingency = parseFloat(totalContingency.toFixed(2));
                                item.total = parseFloat(totalFinal.toFixed(2));
                            }
                        });

                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "budgetModel");
                        that._updateIRREnabledState(totalFinal);
                        var statusDatacheck = that.statusData;
                        if (statusDatacheck === "Pending" || statusDatacheck === "HOD" || statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", false);
                        }
                    }
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                    MessageToast.show("Failed to fetch budget data.", { position: "bottom center" });
                }
            });
        },

        _updateIRREnabledState: function (totalBudget) {
            var enableIRR = totalBudget > 30000000;  // 3 crores
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue(""); 
            }
        },        

        // onFetchTimelinessData: function () {
        //     var reqid = this._reqIDData;
        //     var oView = this.getView();
        //     var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
        //     oModelV2.read("/ProcessLogs", {
        //         filters: [
        //             new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
        //         ],
        //         urlParameters: {
        //             "$orderby": "receivedDt asc"
        //         },
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 var allLogs = [];
        
        //                 // Sort by createdAt (as fallback)
        //                 oData.results.sort(function (a, b) {
        //                     return new Date(a.createdAt) - new Date(b.createdAt);
        //                 });
        
        //                 // Step 1: Process logs into display format
        //                 oData.results.forEach(function (oLog) {
        //                     var statusKey = oLog.status ? oLog.status.trim().toUpperCase() : "";
        //                     var visualStatus = "None";
        
        //                     switch (statusKey) {
        //                         case "APPROVED":
        //                         case "SUBMITTED":
        //                         case "INITIATED":
        //                             visualStatus = "Success";
        //                             break;
        //                         case "PENDING":
        //                             visualStatus = "Warning";
        //                             break;
        //                         case "SEND BACK":
        //                             visualStatus = "Error";
        //                             break;
        //                         default:
        //                             visualStatus = "None";
        //                     }
        
        //                     var logEntry = {
        //                         createdAt: oLog.createdAt,
        //                         receivedDt: oLog.receivedDt,
        //                         stage: oLog.stage || "",
        //                         role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
        //                         userName: oLog.userName || "Unknown User",
        //                         userEmail: oLog.userEmail || "N/A",
        //                         remarks: oLog.remarks || "",
        //                         status: visualStatus,
        //                         originalStatus: statusKey
        //                     };
        
        //                     allLogs.push(logEntry);
        //                 });
        
        //                 // Step 2: Separate logs
        //                 var beforeHOD = [];
        //                 var hodLog = null;
        //                 var afterHOD = [];
        
        //                 var hodFound = false;
        
        //                 allLogs.forEach(function (log) {
        //                     if (!hodFound && log.stage.trim().toUpperCase() === "HOD") {
        //                         hodLog = log;
        //                         hodFound = true;
        //                     } else if (!hodFound) {
        //                         beforeHOD.push(log);
        //                     } else {
        //                         afterHOD.push(log);
        //                     }
        //                 });
        
        //                 // Step 3: Reassemble logs: beforeHOD + hodLog + afterHOD
        //                 var sortedData = [];
        //                 sortedData = sortedData.concat(beforeHOD);
        //                 if (hodLog) {
        //                     sortedData.push(hodLog);
        //                 }
        //                 sortedData = sortedData.concat(afterHOD);
        
        //                 // Step 4: Bind to model
        //                 var oJSONModel = new sap.ui.model.json.JSONModel({
        //                     results: sortedData
        //                 });
        //                 oView.setModel(oJSONModel, "timelinesslogdata");
        //             }
        //         },
        //         error: function (oError) {
        //             sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
        //             console.error("Error fetching timeliness data:", oError);
        //         }
        //     });
        // },
        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                sorters: [
                    new sap.ui.model.Sorter("receivedDt", false) 
                ],
                success: function (oData) {
                    if (oData && oData.results) {
                        var processedLogs = [];
                                oData.results.forEach(function (oLog) {
                            var statusKey = oLog.status ? oLog.status.trim().toUpperCase() : "";
                            var visualStatus = "None";
        
                            switch (statusKey) {
                                case "APPROVED":
                                case "SUBMITTED":
                                case "INITIATED":
                                    visualStatus = "Success";
                                    break;
                                case "PENDING":
                                    visualStatus = "Warning";
                                    break;
                                case "SEND BACK":
                                    visualStatus = "Error";
                                    break;
                                default:
                                    visualStatus = "None";
                            }
                            var logEntry = {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "",
                                status: visualStatus
                            };
                            processedLogs.push(logEntry);
                        });
                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: processedLogs
                        });
        
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", {
                        position: "bottom center"
                    });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },        
       

        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        formatDateTimeWithRemarks: function (createdAt, remarks) {
            if (!createdAt) return "";
            const oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
                style: "medium",
                strictParsing: true,
                UTC: false
            });
            const sDate = oDateFormat.format(new Date(createdAt));
            if (!remarks || remarks.trim() === "") {
                // return sDate + " - Not Yet Approved";
            }

            return sDate;
        },
        //   onAttchmentDataFetch: function () {
        //     var reqid = this._reqIDData;
        //     var oView = this.getView();
        //     var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

        //     // Define date formatter
        //     var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
        //         pattern: "dd-MM-yyyy"
        //     });
        //     var that = this;
        //     var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

        //     oModelV2.read("/ReqAttachments", {
        //         filters: [
        //             new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
        //         ],
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 var aAttachments = oData.results.map(function (item) {
        //                     return {
        //                         ID: item.ID,
        //                         fileName: item.fileName,
        //                         createdBy: that.formatUserDisplay(item.uploadedByID, item.uploadedByName, oCurrentUser),
        //                         createdAt: item.createdAt ? oDateFormat.format(new Date(item.createdAt)) : "",
        //                         deleteTabVisible: that._ApprovedCheck === "Approved" || that.statusData === "Draft" || that.statusData === "Send Back", // Enable delete for approver or draft/send back
        //                         content: item.content
        //                     };
        //                 });

        //                 var oJSONModel = new sap.ui.model.json.JSONModel({
        //                     attachments: aAttachments
        //                 });
        //                 oView.setModel(oJSONModel, "UploadDocSrvTabData");
        //             }
        //         },
        //         error: function (oError) {
        //             MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
        //             console.error("Error fetching attachment data:", oError);
        //         }
        //     });
        // },

        onAttchmentDataFetch: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function (oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },


        onHODDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function (reqid) {
            var oView = this.getView();
            var oModelTabdata = oView.getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            // Get the current user info (from your model)
            var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

            sap.ui.core.BusyIndicator.show(0);

            var oTable = this.byId("SSFDattachmenttable");
            var aItems = oTable.getItems();

            aFilesData.forEach(function (file, index) {
                if (!file.fileName || file.uploaded) return;
                var oItem = aItems[index];
                var oDCBox = oItem.getCells()[1];
                var selectedCategory = oDCBox && oDCBox.getSelectedKey ? oDCBox.getSelectedKey() : "";

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];

                    var payload = {
                        fileName: file.fileName,
                        docCategory: selectedCategory,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid,

                        // Add uploader details
                        uploadedByName: oCurrentUser.name || "",
                        uploadedByID: oCurrentUser.userID || ""
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function () {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function (oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        formatDateOnly: function (uploadedOn, createdAt) {
            var sDate = uploadedOn || createdAt;
            if (!sDate) return "";

            var oDate = new Date(sDate);
            var day = String(oDate.getDate()).padStart(2, "0");
            var month = oDate.toLocaleString("en-US", { month: "short" });
            var year = oDate.getFullYear();

            return `${day}-${month}-${year}`;
        },

        _calculateBudgetItems: function (aBudgetItems, subType) {
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];
            var totalAmount = 0, totalContingency = 0, totalFinal = 0;

            aBudgetItems.forEach(function (item) {
                if (item.nature !== "Total") {
                    var amount = parseFloat(item.amount || 0);
                    if (item.nature === "Capital Budget" && validSubTypes.includes(subType) && amount > 0) {
                        item.contingency = parseFloat((amount * 0.05).toFixed(2));
                        item.total = parseFloat((amount + item.contingency).toFixed(2));
                    } else {
                        item.contingency = 0;
                        item.total = parseFloat(amount.toFixed(2));
                    }
                    totalAmount += amount;
                    totalContingency += item.contingency;
                    totalFinal += item.total;
                }
            });

            aBudgetItems.forEach(function (item) {
                if (item.nature === "Total") {
                    item.amount = parseFloat(totalAmount.toFixed(2));
                    item.contingency = parseFloat(totalContingency.toFixed(2));
                    item.total = parseFloat(totalFinal.toFixed(2));
                }
            });

            return aBudgetItems;
        },

        onSaveSanctionform: function () {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var subType = this._onSubType;
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            // if (oDateValue instanceof Date && !isNaN(oDateValue.getTime())) {
            //     // Format date to yyyy-MM-dd without timezone shift
            //     var year = oDateValue.getUTCFullYear();
            //     // var month = (oDateValue.getUTCMonth() + 1).toString().padStart(2, '0');
            //     // var day = oDateValue.getUTCDate().toString().padStart(2, '0');
            //     // sFormattedDate = `${year}-${month}-${day}`;
            // }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType,
                initDt: oView.byId("dateField").getValue(),
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                // remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new sap.ui.model.json.JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);

                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function (oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.onBudgetDetailDataFetch(reqid);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },


        onConfirmSave: function () {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };
            sap.m.MessageBox.error("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function () {
            this._oSaveDialog.close();
            sap.m.MessageBox.error("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function () {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" },
                { control: oView.byId("inputProjectName"), field: "Project Name" },
                { control: oView.byId("inputItemRequired"), field: "Item Required/Description" },
                { control: oView.byId("_IDGenTextArea"), field: "Background/Current Scenario" },
                { control: oView.byId("_IDGenTextArea1"), field: "Proposal/Justification" },
                { control: oView.byId("_IDGenTextArea2"), field: "Deliverables" },
                { control: oView.byId("dateImplement"), field: "Implementation Date" }
            ];

            var missingFields = [];

            controls.forEach(function (item) {
                item.control.setValueState("None");
                var control = item.control;
                var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function (oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function (oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                sap.m.MessageBox.error("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            if (aItems[iIndex].nature === "Capital Budget" && validSubTypes.includes(this._onSubType) && fValue > 0) {
                aItems[iIndex].contingency = Number((aItems[iIndex].amount * 0.05).toFixed(2));
            } else {
                aItems[iIndex].contingency = 0;
            }
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));
            // Recalculate total row
            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function () {
            var oView = this.getView();
            var isValid = true;
            var missingFields = [];

            // Validate Engineering Hours
            var hours = oView.byId("inputHour");
            hours.setValueState("None");
            var hoursValue = hours.getValue();
            if (!hoursValue || isNaN(parseFloat(hoursValue)) || parseFloat(hoursValue) <= 0) {
                hours.setValueState("Error");
                isValid = false;
                missingFields.push("Engineering Hours (must be a positive number)");
            }

            // Validate Approver selection ONLY for GM PMO stage with COR subtype
            if (this.stagesData === "GM PMO" && this._onSubType === "COR") {
                var approver = oView.byId("approverRequiredFrom");
                if (approver) {
                    approver.setValueState("None");
                    var approverValue = approver.getSelectedKey();
                    if (!approverValue) {
                        approver.setValueState("Error");
                        approver.setValueStateText("Approver selection is required for Cost Over-Run requests.");
                        isValid = false;
                        missingFields.push("Approver");
                    }
                }
            }

            // Validate WBS Code and Cost Center for Final Accounts stage
            if (this.stagesData === "Final Accounts" && this._ApprovedCheck === "Approved") {
                var wbsInput = oView.byId("wbsInput");
                var costCenterInput = oView.byId("costCenterInput");

                // Validate WBS Code
                if (wbsInput) {
                    wbsInput.setValueState("None");
                    var wbsValue = wbsInput.getValue().trim();
                    if (!wbsValue) {
                        wbsInput.setValueState("Error");
                        wbsInput.setValueStateText("WBS Code is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("WBS Code");
                    }
                }

                // Validate Cost Center
                if (costCenterInput) {
                    costCenterInput.setValueState("None");
                    var costCenterValue = costCenterInput.getValue().trim();
                    if (!costCenterValue) {
                        costCenterInput.setValueState("Error");
                        costCenterInput.setValueStateText("Cost Center is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("Cost Center");
                    }
                }
            }

            // Show error if validation fails
            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            // Set model properties and open remarks dialog
            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", (this.stagesData === "GM PMO" && this._onSubType === "COR"));
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function () {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function () {
            this.remarksDialog.close();
        },

        onRejectedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        that.sendbackdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);

                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        // console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subtypedata);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                       sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SEND BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request Send Back successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    // console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error submitting request.", { position: "bottom center" });
                    // console.error("Error submitting request:", oError);
                }
            });
        },

        onReleaseSanctionform: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var isValid = true;
            var controls = [
                { control: oView.byId("wbsInput"), field: "WBS Number" },
                { control: oView.byId("costCenterInput"), field: "Cost Center" },
            ]
            var missingFields = [];

            controls.forEach(function (item) {
                if (item.control) {
                    item.control.setValueState("None");
                    var control = item.control;
                    var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                    if (!value) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field);
                    } else if (item.control.getId().includes("inputHour")) {
                        var hours = parseFloat(value);
                        if (isNaN(hours) || hours <= 0) {
                            item.control.setValueState("Error");
                            isValid = false;
                            missingFields.push(item.field + " (must be a positive number)");
                        }
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields. ";
                MessageBox.error(errorMessage);
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oReleasePayload = {
                // stage: "Released",
                // status: "Released",
                type: "SSFD",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModel.update("/Requests('" + reqid + "')", oReleasePayload, {
                success: function (oData) {
                    sap.ui.core.BusyIndicator.hide();
                    let reqid = oData.reqID;
                    that.onrelaseData(reqid);

                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error releasing request: " + oError.message, { position: "bottom center" });
                    console.error("Error releasing request:", oError);
                }
            });
        },

        onrelaseData: function (reqid) {

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");

            var oApprovedPayload = {

                reqID: reqid,

                action: "APPROVE",

                // remarks: remarkInput

            };

            var that = this;

            sap.ui.core.BusyIndicator.show(0);



            oModel.create("/SSFDApproval", oApprovedPayload, {

                success: function (oData) {

                    sap.m.MessageBox.success("Request Relased successfully!", {

                        onClose: function () {

                            if (that._ApprovedCheck === "Approved") {

                                sap.ui.core.BusyIndicator.hide();

                                var oRouter = that.getOwnerComponent().getRouter();

                                oRouter.navTo("approverdashboard", { Name: "SSFD" });

                            }

                        }

                    });

                },

                error: function (oError) {

                    // console.error("Error approving request:", oError);

                }

            });

        },



        onGetCurrUserforUploadonInitiator: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    role: 'Initiator',
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },

        onUploadTabAttchmment: function (oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            var uploadby = this.uploadbyEmail;

            if (!aFiles || aFiles.length === 0) {
                MessageBox.error("Please select at least one file to upload.", {
                    title: "No Files Selected",
                    actions: [MessageBox.Action.OK]
                });
                return;
            }

            // Check file size (5MB limit)
            var aOversizedFiles = [];
            var MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

            for (var i = 0; i < aFiles.length; i++) {
                if (aFiles[i].size > MAX_FILE_SIZE) {
                    aOversizedFiles.push({
                        name: aFiles[i].name,
                        size: (aFiles[i].size / (1024 * 1024)).toFixed(2) + "MB"
                    });
                }
            }

            if (aOversizedFiles.length > 0) {
                var sMessage = "The following files exceed the 5MB size limit:\n\n";
                aOversizedFiles.forEach(function (file) {
                    sMessage += `• ${file.name} (${file.size})\n`;
                });
                sMessage += "\nPlease reduce file sizes and try again.";

                MessageBox.error(sMessage, {
                    title: "File Size Limit Exceeded",
                    actions: [MessageBox.Action.OK],
                    styleClass: "sapUiSizeCompact"
                });

                oFileUploader.setValue(""); // Clear the file input
                return;
            }

            // Rest of the upload logic remains the same...
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: uploadby,
                            uploadedOn: sUploadedOn,
                            // deleteTabVisible: true,
                            size: file.size
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            // MessageBox.success(`Successfully added ${aFiles.length} file(s) for upload.`, {
                            //     actions: [MessageBox.Action.OK]
                            // });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageBox.error(`Error reading file: ${file.name}`, {
                            actions: [MessageBox.Action.OK]
                        });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },


        onUploadPress: function () {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var sUploadedBy = "Current User";

            aAttachments = aAttachments.filter(function (item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            createdBy: sUploadedBy,
                            createdAt: sUploadedOn,
                            // deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function (oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function (oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function (oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function () {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function (sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function (oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function (oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();
            var iIndex = aAttachments.findIndex(function (oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var that = this;

            MessageBox.confirm("Are you sure you want to delete the file '" + sFileName + "'?", {
                title: "Confirm Deletion",
                onClose: function (sAction) {
                    if (sAction === MessageBox.Action.OK) {
                        var oModelV2 = that.getOwnerComponent().getModel("approvalservicev2");
                        var sPath = "/ReqAttachments(guid'" + sID + "')";

                        oModelV2.remove(sPath, {
                            success: function () {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            },
                            error: function (oError) {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            }
                        });
                    } else {
                        MessageToast.show("Deletion canceled.", { position: "bottom center" });
                    }
                }
            });
        },

        _removeAttachmentFromLocalModel: function (oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChangeLimit1500: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 1500) {
                oTextArea.setValue(sValue.substring(0, 1500));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 1500 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },


        // project name live change 
        onProjectNameLiveChange: function(oEvent) {
            var sValue = oEvent.getParameter("value");
             
            if (sValue.length > 250) {
                sValue = sValue.substring(0, 250);
                oEvent.getSource().setValue(sValue);  
            }
           
        },

        // item require live change
        onItemRequiredLiveChange: function (oEvent) {
            var sValue = oEvent.getParameter("value");
        
            if (sValue.length > 250) {
                sValue = sValue.substring(0, 250);
                oEvent.getSource().setValue(sValue);
            }
        },
        
        handleRemarkChangeLimit4000: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 4000) {
                oTextArea.setValue(sValue.substring(0, 4000));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 4000 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        onTextInputLiveChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sValue = oInput.getValue();
        
            // Allow only letters, numbers, and periods
            var filteredValue = sValue.replace(/[^a-zA-Z0-9.]/g, '');
        
            if (filteredValue !== sValue) {
                oInput.setValue(filteredValue);
            }
        
            if (filteredValue) {
                oInput.setValueState("None");
                oInput.setValueStateText("");
            }
        },
        

        onGetCurrUserforUploadon: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },
    });
});

UPDATED CODE 15

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function (Controller, JSONModel, MessageToast, Fragment, MessageBox, formatter) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        formatter: formatter,

        onInit: function () {

            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                enableFinalAccount: false,
                enableFinalAccountInput: false,
                sendbackbuttonvisiblity: false,
                enableFinalAccount: false,
                remarkModel: "",
                deleteTabVisible: false,
                approverRequiredVisible: false,
                currentUserRole: "",
                isApproverScreen: false,
                enableRowActionsapproval: false,
                uploadiconvisiblity: false,
                // relese button
                releasebuttonvisibility: false,
                visiblityCostoverWBSCenter: false,
                enableBudgetField: false


            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {};
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");

        },

        // Formatter for subType display
        formatSubType: function (sSubType) {
            var mSubTypeMap = {
                "NR": "New Requirement",
                "CON": "Contingency",
                "ILT": "Interline Transfer",
                "BCF": "Budget Carry-Forward",
                "SAVING": "Savings",
                "ITH": "Interhead Transfer",
                "COR": "Cost Over-Run",
                "PPA": "Preproject Approval",
                "CBCF": "Capex Budget Carry-Forward",
                "OTH": "Others"
            };
            return mSubTypeMap[sSubType] || sSubType || "N/A";
        },
        // formatUserDisplay
        formatUserDisplay: function (uploadedByID, uploadedByName, currentUser) {
            if (uploadedByID && uploadedByName) {
                return uploadedByID + " - " + uploadedByName;
            } else if (currentUser && currentUser.userID && currentUser.name) {
                return currentUser.userID + " - " + currentUser.name;
            } else {
                return "";
            }
        },

        // In your _onRouteSanctionfdApproved function, update the approver visibility logic:
        _onRouteSanctionfdApproved: function (oEvent) {
            // Set current date for new requests
            // var oDatePicker = this.byId("dateField");
            // if (oDatePicker) {
            //     var oCurrentDate = new Date();
            //     oDatePicker.setDateValue(oCurrentDate);
            // }

            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this.onGetCurrUserforUploadon();

            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);

                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", true); 
                        // Handle visibility for Final Accounts stage with Pending status
                        if (that.stagesData === "Final Accounts" && that.statusData === "Pending") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/releasebuttonvisibility", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            // oViewModel.setProperty("/approverRequiredVisible", false); // Not needed for Final Accounts
                            oViewModel.setProperty("/isApproverScreen", true);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", true);
                        } else {
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                        }

                        // Handle Approver-specific logic - ONLY show for GM PMO stage with COR subtype
                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/sendbackbuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/releasebuttonvisibility", that.stagesData === "Final Accounts");

                            // Only show approver field for GM PMO stage with COR subtype
                            var showApproverField = ((that.stagesData === "GM PMO") && that._onSubType === "COR");
                            oViewModel.setProperty("/approverRequiredVisible", showApproverField);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            const approverStages = [
                                "Accounts", "Sr VP FDPD", "CEO", "Final Accounts",
                                "VP CDMM", "VP CME", "VP Finance", "FES CFO",
                                "President", "AFS CFO", "ED", "R1", "R2", "R3",
                                "Approver", "Project Finance Member"
                            ];
                            const showApproverField_afterGmpmo = (
                                approverStages.includes(that.stagesData) &&
                                that._onSubType === "COR" &&
                                that._ApprovedCheck === "Approved"
                            );

                            if (showApproverField_afterGmpmo) {
                                // oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                                oViewModel.setProperty("/isApproverScreen", showApproverField_afterGmpmo);

                            }

                            if (that.stagesData === "GM PMO" && that._onSubType === "COR") {
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true);
                            } else {
                                // oViewModel.setProperty("/isApproverScreen", false);
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            // oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }

                        if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            // oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onAttchmentDataFetch();
                        var oDate = oData.results[0].ssfdDtl.implDt;
                        if (oDate) {
                            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                                pattern: "dd-MM-yyyy"
                            });

                            var formattedDate = oDateFormat.format(oDate);
                            that.byId("dateImplement").setValue(formattedDate)
                        }
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function (oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", false); 
                        var isSendBackStatus = ["Sent Back", "Send Back", "SEND BACK"].includes(statusDatacheck);
                        if (statusDatacheck === "Draft" || !statusDatacheck || isSendBackStatus){
                        // if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Sent Back" || statusDatacheck === "Send Back" || statusDatacheck === "SEND BACK" ) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/deleteTabVisible", true); 
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/enableBudgetField", isSendBackStatus);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/enableBudgetField", isSendBackStatus);
                        } else if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/enableBudgetField", isSendBackStatus);
                        }
                        var bDeleteVisible = statusDatacheck === "Draft" ||
                        statusDatacheck === "Sent Back" ||
                        statusDatacheck === "Send Back" ||
                        statusDatacheck === "SEND BACK";

   
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onGetCurrUserforUploadonInitiator();
                        that.onAttchmentDataFetch();

                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function (oEvent) {
            // Set current date for new requests
            
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);
            oViewModel.setProperty("/uploadiconvisiblity", true);
            // oViewModel.setProperty("/deleteTabVisible", true); 
            // Clear attachments when selecting a new request
            var oAttachmentModel = this.getView().getModel("UploadDocSrvTabData");
            oAttachmentModel.setProperty("/attachments", []);

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oinitDtDate = new Date();
            var formattedInitDate = this.formatDate(oinitDtDate);
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: {
                    subType: this._onSubType,
                    division: "FD",
                    puDept: "",
                    hod: "",
                    loc: "",
                    projName: "",
                    itemRequiredDesc: "",
                    budgetRequired: 0,
                    irr: "",
                    market: "",
                    implDt: null,
                    enggHours: "",
                    remarks: "",
                    background: "",
                    justification: "",
                    deliverables: "",
                    capitalBudget: 0,
                    revenueBudget: 0,
                    personnelCost: 0,
                    selectedApprover: "",
                    initDt: formattedInitDate,
                }
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onGetCurrUserforUploadonInitiator();


        },

        formatDate: function (sDate) {
            if (!sDate) return "";
          
            const date = new Date(sDate);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
          
            return `${day}-${month}-${year}`;
          },

        onBudgetDetailDataFetch: function (reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            var subtype = this._onSubType;
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            sap.ui.core.BusyIndicator.show(0);
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function (oData) {
                    if (oData.items && Array.isArray(oData.items)) {
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                var amount = parseFloat(item.amount || 0);
                                if (item.nature === "Capital Budget" && validSubTypes.includes(subtype) && amount > 0) {
                                    item.contingency = parseFloat((amount * 0.05).toFixed(2));
                                    item.total = parseFloat((amount + item.contingency).toFixed(2));
                                } else {
                                    item.contingency = 0;
                                    item.total = parseFloat(amount.toFixed(2));
                                }
                            }
                        });

                        // Recalculate total row
                        var totalAmount = 0, totalContingency = 0, totalFinal = 0;
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                totalAmount += parseFloat(item.amount || 0);
                                totalContingency += parseFloat(item.contingency || 0);
                                totalFinal += parseFloat(item.total || 0);
                            }
                        });

                        oData.items.forEach(function (item) {
                            if (item.nature === "Total") {
                                item.amount = parseFloat(totalAmount.toFixed(2));
                                item.contingency = parseFloat(totalContingency.toFixed(2));
                                item.total = parseFloat(totalFinal.toFixed(2));
                            }
                        });

                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "budgetModel");
                        that._updateIRREnabledState(totalFinal);
                    }
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                    MessageToast.show("Failed to fetch budget data.", { position: "bottom center" });
                }
            });
        },

        _updateIRREnabledState: function (totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt asc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            var statusKey = oLog.status ? oLog.status.trim().toUpperCase() : "";
                            var visualStatus = "None";
        
                            switch (statusKey) {
                                case "APPROVED":
                                case "SUBMITTED":
                                case "INITIATED":
                                    visualStatus = "Success";
                                    break;
                                case "PENDING":
                                    visualStatus = "Warning";
                                    break;
                                case "SEND BACK":
                                    visualStatus = "Error";
                                    break;
                                default:
                                    visualStatus = "None";
                            }
        
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "",
                                status: visualStatus
                            };
                        });
        
                        
        
                        var oJSONModel = new JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },
        
        

        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        formatDateTimeWithRemarks: function (createdAt, remarks) {
            if (!createdAt) return "";
            const oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
                style: "medium",
                strictParsing: true,
                UTC: false
            });
            const sDate = oDateFormat.format(new Date(createdAt));
            if (!remarks || remarks.trim() === "") {
                return sDate + " - Not Yet Approved";
            }

            return sDate;
        },
        //   onAttchmentDataFetch: function () {
        //     var reqid = this._reqIDData;
        //     var oView = this.getView();
        //     var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

        //     // Define date formatter
        //     var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
        //         pattern: "dd-MM-yyyy"
        //     });
        //     var that = this;
        //     var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

        //     oModelV2.read("/ReqAttachments", {
        //         filters: [
        //             new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
        //         ],
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 var aAttachments = oData.results.map(function (item) {
        //                     return {
        //                         ID: item.ID,
        //                         fileName: item.fileName,
        //                         createdBy: that.formatUserDisplay(item.uploadedByID, item.uploadedByName, oCurrentUser),
        //                         createdAt: item.createdAt ? oDateFormat.format(new Date(item.createdAt)) : "",
        //                         deleteTabVisible: that._ApprovedCheck === "Approved" || that.statusData === "Draft" || that.statusData === "Send Back", // Enable delete for approver or draft/send back
        //                         content: item.content
        //                     };
        //                 });

        //                 var oJSONModel = new sap.ui.model.json.JSONModel({
        //                     attachments: aAttachments
        //                 });
        //                 oView.setModel(oJSONModel, "UploadDocSrvTabData");
        //             }
        //         },
        //         error: function (oError) {
        //             MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
        //             console.error("Error fetching attachment data:", oError);
        //         }
        //     });
        // },

        onAttchmentDataFetch: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function (oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },


        onHODDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function (reqid) {
            var oView = this.getView();
            var oModelTabdata = oView.getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            // Get the current user info (from your model)
            var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

            sap.ui.core.BusyIndicator.show(0);

            var oTable = this.byId("SSFDattachmenttable");
            var aItems = oTable.getItems();

            aFilesData.forEach(function (file, index) {
                if (!file.fileName || file.uploaded) return;
                var oItem = aItems[index];
                var oDCBox = oItem.getCells()[1];
                var selectedCategory = oDCBox && oDCBox.getSelectedKey ? oDCBox.getSelectedKey() : "";

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];

                    var payload = {
                        fileName: file.fileName,
                        docCategory: selectedCategory,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid,

                        // Add uploader details
                        uploadedByName: oCurrentUser.name || "",
                        uploadedByID: oCurrentUser.userID || ""
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function () {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function (oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        formatDateOnly: function (uploadedOn, createdAt) {
            var sDate = uploadedOn || createdAt;
            if (!sDate) return "";

            var oDate = new Date(sDate);
            var day = String(oDate.getDate()).padStart(2, "0");
            var month = oDate.toLocaleString("en-US", { month: "short" });
            var year = oDate.getFullYear();

            return `${day}-${month}-${year}`;
        },

        _calculateBudgetItems: function (aBudgetItems, subType) {
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];
            var totalAmount = 0, totalContingency = 0, totalFinal = 0;

            aBudgetItems.forEach(function (item) {
                if (item.nature !== "Total") {
                    var amount = parseFloat(item.amount || 0);
                    if (item.nature === "Capital Budget" && validSubTypes.includes(subType) && amount > 0) {
                        item.contingency = parseFloat((amount * 0.05).toFixed(2));
                        item.total = parseFloat((amount + item.contingency).toFixed(2));
                    } else {
                        item.contingency = 0;
                        item.total = parseFloat(amount.toFixed(2));
                    }
                    totalAmount += amount;
                    totalContingency += item.contingency;
                    totalFinal += item.total;
                }
            });

            aBudgetItems.forEach(function (item) {
                if (item.nature === "Total") {
                    item.amount = parseFloat(totalAmount.toFixed(2));
                    item.contingency = parseFloat(totalContingency.toFixed(2));
                    item.total = parseFloat(totalFinal.toFixed(2));
                }
            });

            return aBudgetItems;
        },

        onSaveSanctionform: function () {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var subType = this._onSubType;
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            // if (oDateValue instanceof Date && !isNaN(oDateValue.getTime())) {
            //     // Format date to yyyy-MM-dd without timezone shift
            //     var year = oDateValue.getUTCFullYear();
            //     // var month = (oDateValue.getUTCMonth() + 1).toString().padStart(2, '0');
            //     // var day = oDateValue.getUTCDate().toString().padStart(2, '0');
            //     // sFormattedDate = `${year}-${month}-${day}`;
            // }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType,
                initDt: oView.byId("dateField").getValue(),
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                // remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new sap.ui.model.json.JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);

                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function (oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.onBudgetDetailDataFetch(reqid);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },


        onConfirmSave: function () {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };
            sap.m.MessageBox.error("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function () {
            this._oSaveDialog.close();
            sap.m.MessageBox.error("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function () {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" },
                { control: oView.byId("inputProjectName"), field: "Project Name" },
                { control: oView.byId("inputItemRequired"), field: "Item Required/Description" },
                { control: oView.byId("_IDGenTextArea"), field: "Background/Current Scenario" },
                { control: oView.byId("_IDGenTextArea1"), field: "Proposal/Justification" },
                { control: oView.byId("_IDGenTextArea2"), field: "Deliverables" },
                { control: oView.byId("dateImplement"), field: "Implementation Date" }
            ];

            var missingFields = [];

            controls.forEach(function (item) {
                item.control.setValueState("None");
                var control = item.control;
                var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function (oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function (oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                sap.m.MessageBox.error("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            if (aItems[iIndex].nature === "Capital Budget" && validSubTypes.includes(this._onSubType) && fValue > 0) {
                aItems[iIndex].contingency = Number((aItems[iIndex].amount * 0.05).toFixed(2));
            } else {
                aItems[iIndex].contingency = 0;
            }
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));
            // Recalculate total row
            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function () {
            var oView = this.getView();
            var isValid = true;
            var missingFields = [];

            // Validate Engineering Hours
            var hours = oView.byId("inputHour");
            hours.setValueState("None");
            var hoursValue = hours.getValue();
            if (!hoursValue || isNaN(parseFloat(hoursValue)) || parseFloat(hoursValue) <= 0) {
                hours.setValueState("Error");
                isValid = false;
                missingFields.push("Engineering Hours (must be a positive number)");
            }

            // Validate Approver selection ONLY for GM PMO stage with COR subtype
            if (this.stagesData === "GM PMO" && this._onSubType === "COR") {
                var approver = oView.byId("approverRequiredFrom");
                if (approver) {
                    approver.setValueState("None");
                    var approverValue = approver.getSelectedKey();
                    if (!approverValue) {
                        approver.setValueState("Error");
                        approver.setValueStateText("Approver selection is required for Cost Over-Run requests.");
                        isValid = false;
                        missingFields.push("Approver");
                    }
                }
            }

            // Validate WBS Code and Cost Center for Final Accounts stage
            if (this.stagesData === "Final Accounts" && this._ApprovedCheck === "Approved") {
                var wbsInput = oView.byId("wbsInput");
                var costCenterInput = oView.byId("costCenterInput");

                // Validate WBS Code
                if (wbsInput) {
                    wbsInput.setValueState("None");
                    var wbsValue = wbsInput.getValue().trim();
                    if (!wbsValue) {
                        wbsInput.setValueState("Error");
                        wbsInput.setValueStateText("WBS Code is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("WBS Code");
                    }
                }

                // Validate Cost Center
                if (costCenterInput) {
                    costCenterInput.setValueState("None");
                    var costCenterValue = costCenterInput.getValue().trim();
                    if (!costCenterValue) {
                        costCenterInput.setValueState("Error");
                        costCenterInput.setValueStateText("Cost Center is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("Cost Center");
                    }
                }
            }

            // Show error if validation fails
            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            // Set model properties and open remarks dialog
            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", (this.stagesData === "GM PMO" && this._onSubType === "COR"));
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function () {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function () {
            this.remarksDialog.close();
        },

        onRejectedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        that.sendbackdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);

                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        // console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subtypedata);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                       sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SEND BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request Send Back successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    // console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onReleaseSanctionform: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var isValid = true;
            var controls = [
                { control: oView.byId("wbsInput"), field: "WBS Number" },
                { control: oView.byId("costCenterInput"), field: "Cost Center" },
            ]
            var missingFields = [];

            controls.forEach(function (item) {
                if (item.control) {
                    item.control.setValueState("None");
                    var control = item.control;
                    var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                    if (!value) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field);
                    } else if (item.control.getId().includes("inputHour")) {
                        var hours = parseFloat(value);
                        if (isNaN(hours) || hours <= 0) {
                            item.control.setValueState("Error");
                            isValid = false;
                            missingFields.push(item.field + " (must be a positive number)");
                        }
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields. ";
                MessageBox.error(errorMessage);
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oReleasePayload = {
                // stage: "Released",
                // status: "Released",
                type: "SSFD",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModel.update("/Requests('" + reqid + "')", oReleasePayload, {
                success: function (oData) {
                    sap.ui.core.BusyIndicator.hide();
                    let reqid = oData.reqID;
                    that.onrelaseData(reqid);

                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error releasing request: " + oError.message, { position: "bottom center" });
                    console.error("Error releasing request:", oError);
                }
            });
        },

        onrelaseData: function (reqid) {

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");

            var oApprovedPayload = {

                reqID: reqid,

                action: "APPROVE",

                // remarks: remarkInput

            };

            var that = this;

            sap.ui.core.BusyIndicator.show(0);



            oModel.create("/SSFDApproval", oApprovedPayload, {

                success: function (oData) {

                    sap.m.MessageBox.success("Request Relased successfully!", {

                        onClose: function () {

                            if (that._ApprovedCheck === "Approved") {

                                sap.ui.core.BusyIndicator.hide();

                                var oRouter = that.getOwnerComponent().getRouter();

                                oRouter.navTo("approverdashboard", { Name: "SSFD" });

                            }

                        }

                    });

                },

                error: function (oError) {

                    // console.error("Error approving request:", oError);

                }

            });

        },



        onGetCurrUserforUploadonInitiator: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    role: 'Initiator',
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },

        onUploadTabAttchmment: function (oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            var uploadby = this.uploadbyEmail;

            if (!aFiles || aFiles.length === 0) {
                MessageBox.error("Please select at least one file to upload.", {
                    title: "No Files Selected",
                    actions: [MessageBox.Action.OK]
                });
                return;
            }

            // Check file size (5MB limit)
            var aOversizedFiles = [];
            var MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

            for (var i = 0; i < aFiles.length; i++) {
                if (aFiles[i].size > MAX_FILE_SIZE) {
                    aOversizedFiles.push({
                        name: aFiles[i].name,
                        size: (aFiles[i].size / (1024 * 1024)).toFixed(2) + "MB"
                    });
                }
            }

            if (aOversizedFiles.length > 0) {
                var sMessage = "The following files exceed the 5MB size limit:\n\n";
                aOversizedFiles.forEach(function (file) {
                    sMessage += `• ${file.name} (${file.size})\n`;
                });
                sMessage += "\nPlease reduce file sizes and try again.";

                MessageBox.error(sMessage, {
                    title: "File Size Limit Exceeded",
                    actions: [MessageBox.Action.OK],
                    styleClass: "sapUiSizeCompact"
                });

                oFileUploader.setValue(""); // Clear the file input
                return;
            }

            // Rest of the upload logic remains the same...
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: uploadby,
                            uploadedOn: sUploadedOn,
                            // deleteTabVisible: true,
                            size: file.size
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            // MessageBox.success(`Successfully added ${aFiles.length} file(s) for upload.`, {
                            //     actions: [MessageBox.Action.OK]
                            // });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageBox.error(`Error reading file: ${file.name}`, {
                            actions: [MessageBox.Action.OK]
                        });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },


        onUploadPress: function () {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var sUploadedBy = "Current User";

            aAttachments = aAttachments.filter(function (item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            createdBy: sUploadedBy,
                            createdAt: sUploadedOn,
                            // deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function (oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function (oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function (oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function () {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function (sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function (oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function (oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();
            var iIndex = aAttachments.findIndex(function (oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var that = this;

            MessageBox.confirm("Are you sure you want to delete the file '" + sFileName + "'?", {
                title: "Confirm Deletion",
                onClose: function (sAction) {
                    if (sAction === MessageBox.Action.OK) {
                        var oModelV2 = that.getOwnerComponent().getModel("approvalservicev2");
                        var sPath = "/ReqAttachments(guid'" + sID + "')";

                        oModelV2.remove(sPath, {
                            success: function () {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            },
                            error: function (oError) {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            }
                        });
                    } else {
                        MessageToast.show("Deletion canceled.", { position: "bottom center" });
                    }
                }
            });
        },

        _removeAttachmentFromLocalModel: function (oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChangeLimit1500: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 1500) {
                oTextArea.setValue(sValue.substring(0, 1500));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 1500 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        handleRemarkChangeLimit4000: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 4000) {
                oTextArea.setValue(sValue.substring(0, 4000));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 4000 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        onTextInputLiveChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sValue = oInput.getValue();
        
            // Allow only letters, numbers, and periods
            var filteredValue = sValue.replace(/[^a-zA-Z0-9.]/g, '');
        
            if (filteredValue !== sValue) {
                oInput.setValue(filteredValue);
            }
        
            if (filteredValue) {
                oInput.setValueState("None");
                oInput.setValueStateText("");
            }
        },
        

        onGetCurrUserforUploadon: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },
    });
});

UPDATED CODE 14

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function (Controller, JSONModel, MessageToast, Fragment, MessageBox, formatter) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        formatter: formatter,

        onInit: function () {

            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var   oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                enableFinalAccount: false,
                enableFinalAccountInput: false,
                sendbackbuttonvisiblity: false,
                enableFinalAccount: false,
                remarkModel: "",
                deleteTabVisible: false,
                approverRequiredVisible: false,
                currentUserRole: "",
                isApproverScreen: false,
                enableRowActionsapproval: false,
                uploadiconvisiblity: false,
                releasebuttonvisibility: false,
                visiblityCostoverWBSCenter: false,
                enableBudgetField: false // Add this line
            });
 
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {};
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");

        },

        // Formatter for subType display
        formatSubType: function (sSubType) {
            var mSubTypeMap = {
                "NR": "New Requirement",
                "CON": "Contingency",
                "ILT": "Interline Transfer",
                "BCF": "Budget Carry-Forward",
                "SAVING": "Savings",
                "ITH": "Interhead Transfer",
                "COR": "Cost Over-Run",
                "PPA": "Preproject Approval",
                "CBCF": "Capex Budget Carry-Forward",
                "OTH": "Others"
            };
            return mSubTypeMap[sSubType] || sSubType || "N/A";
        },
        // formatUserDisplay
        formatUserDisplay: function (uploadedByID, uploadedByName, currentUser) {
            if (uploadedByID && uploadedByName) {
                return uploadedByID + " - " + uploadedByName;
            } else if (currentUser && currentUser.userID && currentUser.name) {
                return currentUser.userID + " - " + currentUser.name;
            } else {
                return "";
            }
        },

        // In your _onRouteSanctionfdApproved function, update the approver visibility logic:
        _onRouteSanctionfdApproved: function (oEvent) {
            // Set current date for new requests
            var oDatePicker = this.byId("dateField");
            if (oDatePicker) {
                var oCurrentDate = new Date();
                var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                    pattern: "dd-MM-yyyy"
                });
                oDatePicker.setValue(oDateFormat.format(oCurrentDate));
                oDatePicker.setVisible(true); // Ensure the DatePicker is visible
            }
        
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this.onGetCurrUserforUploadon();
        
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
        
            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
        
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";
        
                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", true); 
                        // Handle visibility for Final Accounts stage with Pending status
                        if (that.stagesData === "Final Accounts" && that.statusData === "Pending") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/releasebuttonvisibility", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/isApproverScreen", true);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", true);
                        } else {
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                        }
        
                        // Handle Approver-specific logic - ONLY show for GM PMO stage with COR subtype
                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/sendbackbuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/releasebuttonvisibility", that.stagesData === "Final Accounts");
        
                            // Only show approver field for GM PMO stage with COR subtype
                            var showApproverField = ((that.stagesData === "GM PMO") && that._onSubType === "COR");
                            oViewModel.setProperty("/approverRequiredVisible", showApproverField);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            const approverStages = [
                                "Accounts", "Sr VP FDPD", "CEO", "Final Accounts",
                                "VP CDMM", "VP CME", "VP Finance", "FES CFO",
                                "President", "AFS CFO", "ED", "R1", "R2", "R3",
                                "Approver", "Project Finance Member"
                            ];
                            const showApproverField_afterGmpmo = (
                                approverStages.includes(that.stagesData) &&
                                that._onSubType === "COR" &&
                                that._ApprovedCheck === "Approved"
                            );
        
                            if (showApproverField_afterGmpmo) {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                                oViewModel.setProperty("/isApproverScreen", showApproverField_afterGmpmo);
                            }
        
                            if (that.stagesData === "GM PMO" && that._onSubType === "COR") {
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true);
                            } else {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
        
                        if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
        
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onAttchmentDataFetch();
                        var oDate = oData.results[0].ssfdDtl.implDt;
                        if (oDate) {
                            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                                pattern: "dd-MM-yyyy"
                            });
                            var formattedDate = oDateFormat.format(oDate);
                            that.byId("dateImplement").setValue(formattedDate);
                        }
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function (oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
         
            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";
         
                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", false); 
                        // Check for Send Back status (with different possible formats)
                        var isSendBackStatus = ["Sent Back", "Send Back", "SEND BACK"].includes(statusDatacheck);
                        if (statusDatacheck === "Draft" || !statusDatacheck || isSendBackStatus) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/deleteTabVisible", true); 
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            // Enable budget field only for Send Back status
                            oViewModel.setProperty("/enableBudgetField", isSendBackStatus);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/enableBudgetField", false);
                        } else if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/enableBudgetField", false);
                        }
         
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onGetCurrUserforUploadonInitiator();
                        that.onAttchmentDataFetch();
         
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },
         
         

        _onRouteSanctionfdController: function (oEvent) {
            // Set current date for new requests
            
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);
            oViewModel.setProperty("/uploadiconvisiblity", true);
            // oViewModel.setProperty("/deleteTabVisible", true); 
            // Clear attachments when selecting a new request
            var oAttachmentModel = this.getView().getModel("UploadDocSrvTabData");
            oAttachmentModel.setProperty("/attachments", []);

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oinitDtDate = new Date();
            var formattedInitDate = this.formatDate(oinitDtDate);
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: {
                    subType: this._onSubType,
                    division: "FD",
                    puDept: "",
                    hod: "",
                    loc: "",
                    projName: "",
                    itemRequiredDesc: "",
                    budgetRequired: 0,
                    irr: "",
                    market: "",
                    implDt: null,
                    enggHours: "",
                    remarks: "",
                    background: "",
                    justification: "",
                    deliverables: "",
                    capitalBudget: 0,
                    revenueBudget: 0,
                    personnelCost: 0,
                    selectedApprover: "",
                    initDt: formattedInitDate,
                }
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onGetCurrUserforUploadonInitiator();


        },

        formatDate: function (sDate) {
            if (!sDate) return "";
          
            const date = new Date(sDate);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
          
            return `${day}-${month}-${year}`;
          },

        onBudgetDetailDataFetch: function (reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            var subtype = this._onSubType;
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            sap.ui.core.BusyIndicator.show(0);
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function (oData) {
                    if (oData.items && Array.isArray(oData.items)) {
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                var amount = parseFloat(item.amount || 0);
                                if (item.nature === "Capital Budget" && validSubTypes.includes(subtype) && amount > 0) {
                                    item.contingency = parseFloat((amount * 0.05).toFixed(2));
                                    item.total = parseFloat((amount + item.contingency).toFixed(2));
                                } else {
                                    item.contingency = 0;
                                    item.total = parseFloat(amount.toFixed(2));
                                }
                            }
                        });

                        // Recalculate total row
                        var totalAmount = 0, totalContingency = 0, totalFinal = 0;
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                totalAmount += parseFloat(item.amount || 0);
                                totalContingency += parseFloat(item.contingency || 0);
                                totalFinal += parseFloat(item.total || 0);
                            }
                        });

                        oData.items.forEach(function (item) {
                            if (item.nature === "Total") {
                                item.amount = parseFloat(totalAmount.toFixed(2));
                                item.contingency = parseFloat(totalContingency.toFixed(2));
                                item.total = parseFloat(totalFinal.toFixed(2));
                            }
                        });

                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "budgetModel");
                        that._updateIRREnabledState(totalFinal);
                    }
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                    MessageToast.show("Failed to fetch budget data.", { position: "bottom center" });
                }
            });
        },

        _updateIRREnabledState: function (totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt asc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            var statusKey = oLog.status ? oLog.status.trim().toUpperCase() : "";
                            var visualStatus = "None";
        
                            switch (statusKey) {
                                case "APPROVED":
                                case "SUBMITTED":
                                case "INITIATED":
                                    visualStatus = "Success";
                                    break;
                                case "PENDING":
                                    visualStatus = "Warning";
                                    break;
                                case "SEND BACK":
                                    visualStatus = "Error";
                                    break;
                                default:
                                    visualStatus = "None";
                            }
        
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "",
                                status: visualStatus
                            };
                        });
        
                        
        
                        var oJSONModel = new JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },
        
        

        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        formatDateTimeWithRemarks: function (createdAt, remarks) {
            if (!createdAt) return "";
            const oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
                style: "medium",
                strictParsing: true,
                UTC: false
            });
            const sDate = oDateFormat.format(new Date(createdAt));
            if (!remarks || remarks.trim() === "") {
                return sDate + " - Not Yet Approved";
            }

            return sDate;
        },
        //   onAttchmentDataFetch: function () {
        //     var reqid = this._reqIDData;
        //     var oView = this.getView();
        //     var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

        //     // Define date formatter
        //     var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
        //         pattern: "dd-MM-yyyy"
        //     });
        //     var that = this;
        //     var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

        //     oModelV2.read("/ReqAttachments", {
        //         filters: [
        //             new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
        //         ],
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 var aAttachments = oData.results.map(function (item) {
        //                     return {
        //                         ID: item.ID,
        //                         fileName: item.fileName,
        //                         createdBy: that.formatUserDisplay(item.uploadedByID, item.uploadedByName, oCurrentUser),
        //                         createdAt: item.createdAt ? oDateFormat.format(new Date(item.createdAt)) : "",
        //                         deleteTabVisible: that._ApprovedCheck === "Approved" || that.statusData === "Draft" || that.statusData === "Send Back", // Enable delete for approver or draft/send back
        //                         content: item.content
        //                     };
        //                 });

        //                 var oJSONModel = new sap.ui.model.json.JSONModel({
        //                     attachments: aAttachments
        //                 });
        //                 oView.setModel(oJSONModel, "UploadDocSrvTabData");
        //             }
        //         },
        //         error: function (oError) {
        //             MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
        //             console.error("Error fetching attachment data:", oError);
        //         }
        //     });
        // },

        onAttchmentDataFetch: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function (oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },


        onHODDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function (reqid) {
            var oView = this.getView();
            var oModelTabdata = oView.getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            // Get the current user info (from your model)
            var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

            sap.ui.core.BusyIndicator.show(0);

            var oTable = this.byId("SSFDattachmenttable");
            var aItems = oTable.getItems();

            aFilesData.forEach(function (file, index) {
                if (!file.fileName || file.uploaded) return;
                var oItem = aItems[index];
                var oDCBox = oItem.getCells()[1];
                var selectedCategory = oDCBox && oDCBox.getSelectedKey ? oDCBox.getSelectedKey() : "";

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];

                    var payload = {
                        fileName: file.fileName,
                        docCategory: selectedCategory,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid,

                        // Add uploader details
                        uploadedByName: oCurrentUser.name || "",
                        uploadedByID: oCurrentUser.userID || ""
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function () {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function (oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        formatDateOnly: function (uploadedOn, createdAt) {
            var sDate = uploadedOn || createdAt;
            if (!sDate) return "";

            var oDate = new Date(sDate);
            var day = String(oDate.getDate()).padStart(2, "0");
            var month = oDate.toLocaleString("en-US", { month: "short" });
            var year = oDate.getFullYear();

            return `${day}-${month}-${year}`;
        },

        _calculateBudgetItems: function (aBudgetItems, subType) {
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];
            var totalAmount = 0, totalContingency = 0, totalFinal = 0;

            aBudgetItems.forEach(function (item) {
                if (item.nature !== "Total") {
                    var amount = parseFloat(item.amount || 0);
                    if (item.nature === "Capital Budget" && validSubTypes.includes(subType) && amount > 0) {
                        item.contingency = parseFloat((amount * 0.05).toFixed(2));
                        item.total = parseFloat((amount + item.contingency).toFixed(2));
                    } else {
                        item.contingency = 0;
                        item.total = parseFloat(amount.toFixed(2));
                    }
                    totalAmount += amount;
                    totalContingency += item.contingency;
                    totalFinal += item.total;
                }
            });

            aBudgetItems.forEach(function (item) {
                if (item.nature === "Total") {
                    item.amount = parseFloat(totalAmount.toFixed(2));
                    item.contingency = parseFloat(totalContingency.toFixed(2));
                    item.total = parseFloat(totalFinal.toFixed(2));
                }
            });

            return aBudgetItems;
        },

        onSaveSanctionform: function () {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var subType = this._onSubType;
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            // if (oDateValue instanceof Date && !isNaN(oDateValue.getTime())) {
            //     // Format date to yyyy-MM-dd without timezone shift
            //     var year = oDateValue.getUTCFullYear();
            //     // var month = (oDateValue.getUTCMonth() + 1).toString().padStart(2, '0');
            //     // var day = oDateValue.getUTCDate().toString().padStart(2, '0');
            //     // sFormattedDate = `${year}-${month}-${day}`;
            // }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType,
                initDt: oView.byId("dateField").getValue(),
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                // remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new sap.ui.model.json.JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);

                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function (oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.onBudgetDetailDataFetch(reqid);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },


        onConfirmSave: function () {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };
            sap.m.MessageBox.error("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function () {
            this._oSaveDialog.close();
            sap.m.MessageBox.error("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function () {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" },
                { control: oView.byId("inputProjectName"), field: "Project Name" },
                { control: oView.byId("inputItemRequired"), field: "Item Required/Description" },
                { control: oView.byId("_IDGenTextArea"), field: "Background/Current Scenario" },
                { control: oView.byId("_IDGenTextArea1"), field: "Proposal/Justification" },
                { control: oView.byId("_IDGenTextArea2"), field: "Deliverables" },
                { control: oView.byId("dateImplement"), field: "Implementation Date" }
            ];

            var missingFields = [];

            controls.forEach(function (item) {
                item.control.setValueState("None");
                var control = item.control;
                var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function (oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function (oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                sap.m.MessageBox.error("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            if (aItems[iIndex].nature === "Capital Budget" && validSubTypes.includes(this._onSubType) && fValue > 0) {
                aItems[iIndex].contingency = Number((aItems[iIndex].amount * 0.05).toFixed(2));
            } else {
                aItems[iIndex].contingency = 0;
            }
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));
            // Recalculate total row
            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function () {
            var oView = this.getView();
            var isValid = true;
            var missingFields = [];

            // Validate Engineering Hours
            var hours = oView.byId("inputHour");
            hours.setValueState("None");
            var hoursValue = hours.getValue();
            if (!hoursValue || isNaN(parseFloat(hoursValue)) || parseFloat(hoursValue) <= 0) {
                hours.setValueState("Error");
                isValid = false;
                missingFields.push("Engineering Hours (must be a positive number)");
            }

            // Validate Approver selection ONLY for GM PMO stage with COR subtype
            if (this.stagesData === "GM PMO" && this._onSubType === "COR") {
                var approver = oView.byId("approverRequiredFrom");
                if (approver) {
                    approver.setValueState("None");
                    var approverValue = approver.getSelectedKey();
                    if (!approverValue) {
                        approver.setValueState("Error");
                        approver.setValueStateText("Approver selection is required for Cost Over-Run requests.");
                        isValid = false;
                        missingFields.push("Approver");
                    }
                }
            }

            // Validate WBS Code and Cost Center for Final Accounts stage
            if (this.stagesData === "Final Accounts" && this._ApprovedCheck === "Approved") {
                var wbsInput = oView.byId("wbsInput");
                var costCenterInput = oView.byId("costCenterInput");

                // Validate WBS Code
                if (wbsInput) {
                    wbsInput.setValueState("None");
                    var wbsValue = wbsInput.getValue().trim();
                    if (!wbsValue) {
                        wbsInput.setValueState("Error");
                        wbsInput.setValueStateText("WBS Code is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("WBS Code");
                    }
                }

                // Validate Cost Center
                if (costCenterInput) {
                    costCenterInput.setValueState("None");
                    var costCenterValue = costCenterInput.getValue().trim();
                    if (!costCenterValue) {
                        costCenterInput.setValueState("Error");
                        costCenterInput.setValueStateText("Cost Center is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("Cost Center");
                    }
                }
            }

            // Show error if validation fails
            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            // Set model properties and open remarks dialog
            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", (this.stagesData === "GM PMO" && this._onSubType === "COR"));
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function () {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function () {
            this.remarksDialog.close();
        },

        onRejectedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        that.sendbackdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);

                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        // console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subtypedata);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                       sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SEND BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request Send Back successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    // console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error submitting request.", { position: "bottom center" });
                    // console.error("Error submitting request:", oError);
                }
            });
        },

        onReleaseSanctionform: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var isValid = true;
            var controls = [
                { control: oView.byId("wbsInput"), field: "WBS Number" },
                { control: oView.byId("costCenterInput"), field: "Cost Center" },
            ]
            var missingFields = [];

            controls.forEach(function (item) {
                if (item.control) {
                    item.control.setValueState("None");
                    var control = item.control;
                    var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                    if (!value) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field);
                    } else if (item.control.getId().includes("inputHour")) {
                        var hours = parseFloat(value);
                        if (isNaN(hours) || hours <= 0) {
                            item.control.setValueState("Error");
                            isValid = false;
                            missingFields.push(item.field + " (must be a positive number)");
                        }
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields. ";
                MessageBox.error(errorMessage);
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oReleasePayload = {
                // stage: "Released",
                // status: "Released",
                type: "SSFD",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModel.update("/Requests('" + reqid + "')", oReleasePayload, {
                success: function (oData) {
                    sap.ui.core.BusyIndicator.hide();
                    let reqid = oData.reqID;
                    that.onrelaseData(reqid);

                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error releasing request: " + oError.message, { position: "bottom center" });
                    console.error("Error releasing request:", oError);
                }
            });
        },

        onrelaseData: function (reqid) {

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");

            var oApprovedPayload = {

                reqID: reqid,

                action: "APPROVE",

                // remarks: remarkInput

            };

            var that = this;

            sap.ui.core.BusyIndicator.show(0);



            oModel.create("/SSFDApproval", oApprovedPayload, {

                success: function (oData) {

                    sap.m.MessageBox.success("Request Relased successfully!", {

                        onClose: function () {

                            if (that._ApprovedCheck === "Approved") {

                                sap.ui.core.BusyIndicator.hide();

                                var oRouter = that.getOwnerComponent().getRouter();

                                oRouter.navTo("approverdashboard", { Name: "SSFD" });

                            }

                        }

                    });

                },

                error: function (oError) {

                    // console.error("Error approving request:", oError);

                }

            });

        },



        onGetCurrUserforUploadonInitiator: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    role: 'Initiator',
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },

        onUploadTabAttchmment: function (oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            var uploadby = this.uploadbyEmail;

            if (!aFiles || aFiles.length === 0) {
                MessageBox.error("Please select at least one file to upload.", {
                    title: "No Files Selected",
                    actions: [MessageBox.Action.OK]
                });
                return;
            }

            // Check file size (5MB limit)
            var aOversizedFiles = [];
            var MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

            for (var i = 0; i < aFiles.length; i++) {
                if (aFiles[i].size > MAX_FILE_SIZE) {
                    aOversizedFiles.push({
                        name: aFiles[i].name,
                        size: (aFiles[i].size / (1024 * 1024)).toFixed(2) + "MB"
                    });
                }
            }

            if (aOversizedFiles.length > 0) {
                var sMessage = "The following files exceed the 5MB size limit:\n\n";
                aOversizedFiles.forEach(function (file) {
                    sMessage += `• ${file.name} (${file.size})\n`;
                });
                sMessage += "\nPlease reduce file sizes and try again.";

                MessageBox.error(sMessage, {
                    title: "File Size Limit Exceeded",
                    actions: [MessageBox.Action.OK],
                    styleClass: "sapUiSizeCompact"
                });

                oFileUploader.setValue(""); // Clear the file input
                return;
            }

            // Rest of the upload logic remains the same...
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: uploadby,
                            uploadedOn: sUploadedOn,
                            // deleteTabVisible: true,
                            size: file.size
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            // MessageBox.success(`Successfully added ${aFiles.length} file(s) for upload.`, {
                            //     actions: [MessageBox.Action.OK]
                            // });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageBox.error(`Error reading file: ${file.name}`, {
                            actions: [MessageBox.Action.OK]
                        });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },


        onUploadPress: function () {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var sUploadedBy = "Current User";

            aAttachments = aAttachments.filter(function (item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            createdBy: sUploadedBy,
                            createdAt: sUploadedOn,
                            // deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function (oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function (oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function (oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function () {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function (sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function (oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function (oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();
            var iIndex = aAttachments.findIndex(function (oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var that = this;

            MessageBox.confirm("Are you sure you want to delete the file '" + sFileName + "'?", {
                title: "Confirm Deletion",
                onClose: function (sAction) {
                    if (sAction === MessageBox.Action.OK) {
                        var oModelV2 = that.getOwnerComponent().getModel("approvalservicev2");
                        var sPath = "/ReqAttachments(guid'" + sID + "')";

                        oModelV2.remove(sPath, {
                            success: function () {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            },
                            error: function (oError) {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            }
                        });
                    } else {
                        MessageToast.show("Deletion canceled.", { position: "bottom center" });
                    }
                }
            });
        },

        _removeAttachmentFromLocalModel: function (oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChangeLimit1500: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 1500) {
                oTextArea.setValue(sValue.substring(0, 1500));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 1500 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        handleRemarkChangeLimit4000: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 4000) {
                oTextArea.setValue(sValue.substring(0, 4000));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 4000 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        onTextInputLiveChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sValue = oInput.getValue();
        
            // Allow only letters, numbers, and periods
            var filteredValue = sValue.replace(/[^a-zA-Z0-9.]/g, '');
        
            if (filteredValue !== sValue) {
                oInput.setValue(filteredValue);
            }
        
            if (filteredValue) {
                oInput.setValueState("None");
                oInput.setValueStateText("");
            }
        },
        

        onGetCurrUserforUploadon: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },
    });
});

UPDATED CODE 13

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function (Controller, JSONModel, MessageToast, Fragment, MessageBox, formatter) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        formatter: formatter,

        onInit: function () {

            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                enableFinalAccount: false,
                enableFinalAccountInput: false,
                sendbackbuttonvisiblity: false,
                enableFinalAccount: false,
                remarkModel: "",
                deleteTabVisible: false,
                approverRequiredVisible: false,
                currentUserRole: "",
                isApproverScreen: false,
                enableRowActionsapproval: false,
                uploadiconvisiblity: false,
                // relese button
                releasebuttonvisibility: false,
                visiblityCostoverWBSCenter: false


            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {};
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");

        },

        // Formatter for subType display
        formatSubType: function (sSubType) {
            var mSubTypeMap = {
                "NR": "New Requirement",
                "CON": "Contingency",
                "ILT": "Interline Transfer",
                "BCF": "Budget Carry-Forward",
                "SAVING": "Savings",
                "ITH": "Interhead Transfer",
                "COR": "Cost Over-Run",
                "PPA": "Preproject Approval",
                "CBCF": "Capex Budget Carry-Forward",
                "OTH": "Others"
            };
            return mSubTypeMap[sSubType] || sSubType || "N/A";
        },
        // formatUserDisplay
        formatUserDisplay: function (uploadedByID, uploadedByName, currentUser) {
            if (uploadedByID && uploadedByName) {
                return uploadedByID + " - " + uploadedByName;
            } else if (currentUser && currentUser.userID && currentUser.name) {
                return currentUser.userID + " - " + currentUser.name;
            } else {
                return "";
            }
        },

        // In your _onRouteSanctionfdApproved function, update the approver visibility logic:
        _onRouteSanctionfdApproved: function (oEvent) {
            // Set current date for new requests
            var oDatePicker = this.byId("dateField");
            if (oDatePicker) {
                var oCurrentDate = new Date();
                var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                    pattern: "dd-MM-yyyy"
                });
                oDatePicker.setValue(oDateFormat.format(oCurrentDate));
                oDatePicker.setVisible(true); // Ensure the DatePicker is visible
            }
        
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this.onGetCurrUserforUploadon();
        
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
        
            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
        
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";
        
                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", true); 
                        // Handle visibility for Final Accounts stage with Pending status
                        if (that.stagesData === "Final Accounts" && that.statusData === "Pending") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                            oViewModel.setProperty("/releasebuttonvisibility", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/isApproverScreen", true);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", true);
                        } else {
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                        }
        
                        // Handle Approver-specific logic - ONLY show for GM PMO stage with COR subtype
                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/sendbackbuttonvisiblity", that.stagesData !== "Final Accounts");
                            oViewModel.setProperty("/releasebuttonvisibility", that.stagesData === "Final Accounts");
        
                            // Only show approver field for GM PMO stage with COR subtype
                            var showApproverField = ((that.stagesData === "GM PMO") && that._onSubType === "COR");
                            oViewModel.setProperty("/approverRequiredVisible", showApproverField);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            const approverStages = [
                                "Accounts", "Sr VP FDPD", "CEO", "Final Accounts",
                                "VP CDMM", "VP CME", "VP Finance", "FES CFO",
                                "President", "AFS CFO", "ED", "R1", "R2", "R3",
                                "Approver", "Project Finance Member"
                            ];
                            const showApproverField_afterGmpmo = (
                                approverStages.includes(that.stagesData) &&
                                that._onSubType === "COR" &&
                                that._ApprovedCheck === "Approved"
                            );
        
                            if (showApproverField_afterGmpmo) {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                                oViewModel.setProperty("/isApproverScreen", showApproverField_afterGmpmo);
                            }
        
                            if (that.stagesData === "GM PMO" && that._onSubType === "COR") {
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true);
                            } else {
                                oViewModel.setProperty("/enableRowActionsapproval", false);
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/sendbackbuttonvisiblity", false);
                            oViewModel.setProperty("/releasebuttonvisibility", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
        
                        if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                        }
        
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onAttchmentDataFetch();
                        var oDate = oData.results[0].ssfdDtl.implDt;
                        if (oDate) {
                            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
                                pattern: "dd-MM-yyyy"
                            });
                            var formattedDate = oDateFormat.format(oDate);
                            that.byId("dateImplement").setValue(formattedDate);
                        }
                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function (oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function (oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;
                        that._onSubType = oData.results[0].ssfdDtl.subType || "";

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        oViewModel.setProperty("/deleteTabVisible", false); 
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Sent Back" || statusDatacheck === "Send Back" || statusDatacheck === "SEND BACK" ) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", true);
                            oViewModel.setProperty("/deleteTabVisible", true); 
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                        } else if (statusDatacheck === "Approved" || statusDatacheck === "Released") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/deleteTabVisible", false); 
                            oViewModel.setProperty("/enableRowActionsapproval", false);
                            oViewModel.setProperty("/uploadiconvisiblity", false);
                            oViewModel.setProperty("/visiblityCostoverWBSCenter", false);
                            oViewModel.setProperty("/enableFinalAccountInput", true);
                        }
                        var bDeleteVisible = statusDatacheck === "Draft" ||
                        statusDatacheck === "Sent Back" ||
                        statusDatacheck === "Send Back" ||
                        statusDatacheck === "SEND BACK";

   
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onBudgetDetailDataFetch(reqID);
                        that.onGetCurrUserforUploadonInitiator();
                        that.onAttchmentDataFetch();

                    } else {
                        sap.m.MessageBox.error("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function (oEvent) {
            // Set current date for new requests
            
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);
            oViewModel.setProperty("/uploadiconvisiblity", true);
            // oViewModel.setProperty("/deleteTabVisible", true); 
            // Clear attachments when selecting a new request
            var oAttachmentModel = this.getView().getModel("UploadDocSrvTabData");
            oAttachmentModel.setProperty("/attachments", []);

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oinitDtDate = new Date();
            var formattedInitDate = this.formatDate(oinitDtDate);
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: {
                    subType: this._onSubType,
                    division: "FD",
                    puDept: "",
                    hod: "",
                    loc: "",
                    projName: "",
                    itemRequiredDesc: "",
                    budgetRequired: 0,
                    irr: "",
                    market: "",
                    implDt: null,
                    enggHours: "",
                    remarks: "",
                    background: "",
                    justification: "",
                    deliverables: "",
                    capitalBudget: 0,
                    revenueBudget: 0,
                    personnelCost: 0,
                    selectedApprover: "",
                    initDt: formattedInitDate,
                }
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onGetCurrUserforUploadonInitiator();


        },

        formatDate: function (sDate) {
            if (!sDate) return "";
          
            const date = new Date(sDate);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
          
            return `${day}-${month}-${year}`;
          },

        onBudgetDetailDataFetch: function (reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            var subtype = this._onSubType;
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            sap.ui.core.BusyIndicator.show(0);
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function (oData) {
                    if (oData.items && Array.isArray(oData.items)) {
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                var amount = parseFloat(item.amount || 0);
                                if (item.nature === "Capital Budget" && validSubTypes.includes(subtype) && amount > 0) {
                                    item.contingency = parseFloat((amount * 0.05).toFixed(2));
                                    item.total = parseFloat((amount + item.contingency).toFixed(2));
                                } else {
                                    item.contingency = 0;
                                    item.total = parseFloat(amount.toFixed(2));
                                }
                            }
                        });

                        // Recalculate total row
                        var totalAmount = 0, totalContingency = 0, totalFinal = 0;
                        oData.items.forEach(function (item) {
                            if (item.nature !== "Total") {
                                totalAmount += parseFloat(item.amount || 0);
                                totalContingency += parseFloat(item.contingency || 0);
                                totalFinal += parseFloat(item.total || 0);
                            }
                        });

                        oData.items.forEach(function (item) {
                            if (item.nature === "Total") {
                                item.amount = parseFloat(totalAmount.toFixed(2));
                                item.contingency = parseFloat(totalContingency.toFixed(2));
                                item.total = parseFloat(totalFinal.toFixed(2));
                            }
                        });

                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "budgetModel");
                        that._updateIRREnabledState(totalFinal);
                    }
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                    MessageToast.show("Failed to fetch budget data.", { position: "bottom center" });
                }
            });
        },

        _updateIRREnabledState: function (totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt asc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            var statusKey = oLog.status ? oLog.status.trim().toUpperCase() : "";
                            var visualStatus = "None";
        
                            switch (statusKey) {
                                case "APPROVED":
                                case "SUBMITTED":
                                case "INITIATED":
                                    visualStatus = "Success";
                                    break;
                                case "PENDING":
                                    visualStatus = "Warning";
                                    break;
                                case "SEND BACK":
                                    visualStatus = "Error";
                                    break;
                                default:
                                    visualStatus = "None";
                            }
        
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "",
                                status: visualStatus
                            };
                        });
        
                        
        
                        var oJSONModel = new JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },
        
        

        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        formatDateTimeWithRemarks: function (createdAt, remarks) {
            if (!createdAt) return "";
            const oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
                style: "medium",
                strictParsing: true,
                UTC: false
            });
            const sDate = oDateFormat.format(new Date(createdAt));
            if (!remarks || remarks.trim() === "") {
                return sDate + " - Not Yet Approved";
            }

            return sDate;
        },
        //   onAttchmentDataFetch: function () {
        //     var reqid = this._reqIDData;
        //     var oView = this.getView();
        //     var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

        //     // Define date formatter
        //     var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
        //         pattern: "dd-MM-yyyy"
        //     });
        //     var that = this;
        //     var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

        //     oModelV2.read("/ReqAttachments", {
        //         filters: [
        //             new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
        //         ],
        //         success: function (oData) {
        //             if (oData && oData.results) {
        //                 var aAttachments = oData.results.map(function (item) {
        //                     return {
        //                         ID: item.ID,
        //                         fileName: item.fileName,
        //                         createdBy: that.formatUserDisplay(item.uploadedByID, item.uploadedByName, oCurrentUser),
        //                         createdAt: item.createdAt ? oDateFormat.format(new Date(item.createdAt)) : "",
        //                         deleteTabVisible: that._ApprovedCheck === "Approved" || that.statusData === "Draft" || that.statusData === "Send Back", // Enable delete for approver or draft/send back
        //                         content: item.content
        //                     };
        //                 });

        //                 var oJSONModel = new sap.ui.model.json.JSONModel({
        //                     attachments: aAttachments
        //                 });
        //                 oView.setModel(oJSONModel, "UploadDocSrvTabData");
        //             }
        //         },
        //         error: function (oError) {
        //             MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
        //             console.error("Error fetching attachment data:", oError);
        //         }
        //     });
        // },

        onAttchmentDataFetch: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function (oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },


        onHODDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function () {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function (oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function (oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function () {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", { Name: "SSFD" });
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function (reqid) {
            var oView = this.getView();
            var oModelTabdata = oView.getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            // Get the current user info (from your model)
            var oCurrentUser = oView.getModel("CurrentUser").getProperty("/user") || {};

            sap.ui.core.BusyIndicator.show(0);

            var oTable = this.byId("SSFDattachmenttable");
            var aItems = oTable.getItems();

            aFilesData.forEach(function (file, index) {
                if (!file.fileName || file.uploaded) return;
                var oItem = aItems[index];
                var oDCBox = oItem.getCells()[1];
                var selectedCategory = oDCBox && oDCBox.getSelectedKey ? oDCBox.getSelectedKey() : "";

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];

                    var payload = {
                        fileName: file.fileName,
                        docCategory: selectedCategory,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid,

                        // Add uploader details
                        uploadedByName: oCurrentUser.name || "",
                        uploadedByID: oCurrentUser.userID || ""
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function () {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function (oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        formatDateOnly: function (uploadedOn, createdAt) {
            var sDate = uploadedOn || createdAt;
            if (!sDate) return "";

            var oDate = new Date(sDate);
            var day = String(oDate.getDate()).padStart(2, "0");
            var month = oDate.toLocaleString("en-US", { month: "short" });
            var year = oDate.getFullYear();

            return `${day}-${month}-${year}`;
        },

        _calculateBudgetItems: function (aBudgetItems, subType) {
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];
            var totalAmount = 0, totalContingency = 0, totalFinal = 0;

            aBudgetItems.forEach(function (item) {
                if (item.nature !== "Total") {
                    var amount = parseFloat(item.amount || 0);
                    if (item.nature === "Capital Budget" && validSubTypes.includes(subType) && amount > 0) {
                        item.contingency = parseFloat((amount * 0.05).toFixed(2));
                        item.total = parseFloat((amount + item.contingency).toFixed(2));
                    } else {
                        item.contingency = 0;
                        item.total = parseFloat(amount.toFixed(2));
                    }
                    totalAmount += amount;
                    totalContingency += item.contingency;
                    totalFinal += item.total;
                }
            });

            aBudgetItems.forEach(function (item) {
                if (item.nature === "Total") {
                    item.amount = parseFloat(totalAmount.toFixed(2));
                    item.contingency = parseFloat(totalContingency.toFixed(2));
                    item.total = parseFloat(totalFinal.toFixed(2));
                }
            });

            return aBudgetItems;
        },

        onSaveSanctionform: function () {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var subType = this._onSubType;
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            // if (oDateValue instanceof Date && !isNaN(oDateValue.getTime())) {
            //     // Format date to yyyy-MM-dd without timezone shift
            //     var year = oDateValue.getUTCFullYear();
            //     // var month = (oDateValue.getUTCMonth() + 1).toString().padStart(2, '0');
            //     // var day = oDateValue.getUTCDate().toString().padStart(2, '0');
            //     // sFormattedDate = `${year}-${month}-${day}`;
            // }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType,
                initDt: oView.byId("dateField").getValue(),
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                // remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new sap.ui.model.json.JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);

                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function (oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.onBudgetDetailDataFetch(reqid);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },


        onConfirmSave: function () {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };
            sap.m.MessageBox.error("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function () {
            this._oSaveDialog.close();
            sap.m.MessageBox.error("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function () {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" },
                { control: oView.byId("inputProjectName"), field: "Project Name" },
                { control: oView.byId("inputItemRequired"), field: "Item Required/Description" },
                { control: oView.byId("_IDGenTextArea"), field: "Background/Current Scenario" },
                { control: oView.byId("_IDGenTextArea1"), field: "Proposal/Justification" },
                { control: oView.byId("_IDGenTextArea2"), field: "Deliverables" },
                { control: oView.byId("dateImplement"), field: "Implementation Date" }
            ];

            var missingFields = [];

            controls.forEach(function (item) {
                item.control.setValueState("None");
                var control = item.control;
                var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function (oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function (oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                sap.m.MessageBox.error("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            if (aItems[iIndex].nature === "Capital Budget" && validSubTypes.includes(this._onSubType) && fValue > 0) {
                aItems[iIndex].contingency = Number((aItems[iIndex].amount * 0.05).toFixed(2));
            } else {
                aItems[iIndex].contingency = 0;
            }
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));
            // Recalculate total row
            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function (oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function () {
            var oView = this.getView();
            var isValid = true;
            var missingFields = [];

            // Validate Engineering Hours
            var hours = oView.byId("inputHour");
            hours.setValueState("None");
            var hoursValue = hours.getValue();
            if (!hoursValue || isNaN(parseFloat(hoursValue)) || parseFloat(hoursValue) <= 0) {
                hours.setValueState("Error");
                isValid = false;
                missingFields.push("Engineering Hours (must be a positive number)");
            }

            // Validate Approver selection ONLY for GM PMO stage with COR subtype
            if (this.stagesData === "GM PMO" && this._onSubType === "COR") {
                var approver = oView.byId("approverRequiredFrom");
                if (approver) {
                    approver.setValueState("None");
                    var approverValue = approver.getSelectedKey();
                    if (!approverValue) {
                        approver.setValueState("Error");
                        approver.setValueStateText("Approver selection is required for Cost Over-Run requests.");
                        isValid = false;
                        missingFields.push("Approver");
                    }
                }
            }

            // Validate WBS Code and Cost Center for Final Accounts stage
            if (this.stagesData === "Final Accounts" && this._ApprovedCheck === "Approved") {
                var wbsInput = oView.byId("wbsInput");
                var costCenterInput = oView.byId("costCenterInput");

                // Validate WBS Code
                if (wbsInput) {
                    wbsInput.setValueState("None");
                    var wbsValue = wbsInput.getValue().trim();
                    if (!wbsValue) {
                        wbsInput.setValueState("Error");
                        wbsInput.setValueStateText("WBS Code is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("WBS Code");
                    }
                }

                // Validate Cost Center
                if (costCenterInput) {
                    costCenterInput.setValueState("None");
                    var costCenterValue = costCenterInput.getValue().trim();
                    if (!costCenterValue) {
                        costCenterInput.setValueState("Error");
                        costCenterInput.setValueStateText("Cost Center is required for Final Accounts.");
                        isValid = false;
                        missingFields.push("Cost Center");
                    }
                }
            }

            // Show error if validation fails
            if (!isValid) {
                var errorMessage = "Please fill all required fields.";
                MessageBox.error(errorMessage);
                return;
            }

            // Set model properties and open remarks dialog
            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", (this.stagesData === "GM PMO" && this._onSubType === "COR"));
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function () {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function () {
            this.remarksDialog.close();
        },

        onRejectedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.m.MessageBox.error("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        that.sendbackdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);
                    },
                    error: function (oError) {
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                        that.attachmentuploadFilesData(oData.reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                        that.attachmentuploadFilesData(reqid);

                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        // console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, subtypedata);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                // remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function (oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                       sap.m.MessageBox.error("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function () {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function (oError) {
                        sap.ui.core.BusyIndicator.hide();
                        sap.m.MessageBox.error("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SEND BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request Send Back successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    // console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function (reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function (oData) {
                    sap.m.MessageBox.success(oData.SSFDApproval?.message || "Request approved successfully!", {
                        onClose: function () {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onReleaseSanctionform: function () {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var isValid = true;
            var controls = [
                { control: oView.byId("wbsInput"), field: "WBS Number" },
                { control: oView.byId("costCenterInput"), field: "Cost Center" },
            ]
            var missingFields = [];

            controls.forEach(function (item) {
                if (item.control) {
                    item.control.setValueState("None");
                    var control = item.control;
                    var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                    if (!value) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field);
                    } else if (item.control.getId().includes("inputHour")) {
                        var hours = parseFloat(value);
                        if (isNaN(hours) || hours <= 0) {
                            item.control.setValueState("Error");
                            isValid = false;
                            missingFields.push(item.field + " (must be a positive number)");
                        }
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields. ";
                MessageBox.error(errorMessage);
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            aBudgetItems = this._calculateBudgetItems(aBudgetItems, this._onSubType);
            oView.getModel("budgetModel").setProperty("/items", aBudgetItems);
            oView.getModel("budgetModel").refresh(true);

            var oSsfdDtl = {
                initDt: oView.byId("dateField").getValue(),
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: "",
                WBSNumber: oView.byId("wbsInput") ? oView.byId("wbsInput").getValue() : "",
                costCentre: oView.byId("costCenterInput") ? oView.byId("costCenterInput").getValue() : "",
                subType: this._onSubType
            };

            var oReleasePayload = {
                // stage: "Released",
                // status: "Released",
                type: "SSFD",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModel.update("/Requests('" + reqid + "')", oReleasePayload, {
                success: function (oData) {
                    sap.ui.core.BusyIndicator.hide();
                    let reqid = oData.reqID;
                    that.onrelaseData(reqid);

                },
                error: function (oError) {
                    sap.ui.core.BusyIndicator.hide();
                    sap.m.MessageBox.error("Error releasing request: " + oError.message, { position: "bottom center" });
                    console.error("Error releasing request:", oError);
                }
            });
        },

        onrelaseData: function (reqid) {

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");

            var oApprovedPayload = {

                reqID: reqid,

                action: "APPROVE",

                // remarks: remarkInput

            };

            var that = this;

            sap.ui.core.BusyIndicator.show(0);



            oModel.create("/SSFDApproval", oApprovedPayload, {

                success: function (oData) {

                    sap.m.MessageBox.success("Request Relased successfully!", {

                        onClose: function () {

                            if (that._ApprovedCheck === "Approved") {

                                sap.ui.core.BusyIndicator.hide();

                                var oRouter = that.getOwnerComponent().getRouter();

                                oRouter.navTo("approverdashboard", { Name: "SSFD" });

                            }

                        }

                    });

                },

                error: function (oError) {

                    // console.error("Error approving request:", oError);

                }

            });

        },



        onGetCurrUserforUploadonInitiator: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    role: 'Initiator',
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },

        onUploadTabAttchmment: function (oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            var uploadby = this.uploadbyEmail;

            if (!aFiles || aFiles.length === 0) {
                MessageBox.error("Please select at least one file to upload.", {
                    title: "No Files Selected",
                    actions: [MessageBox.Action.OK]
                });
                return;
            }

            // Check file size (5MB limit)
            var aOversizedFiles = [];
            var MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

            for (var i = 0; i < aFiles.length; i++) {
                if (aFiles[i].size > MAX_FILE_SIZE) {
                    aOversizedFiles.push({
                        name: aFiles[i].name,
                        size: (aFiles[i].size / (1024 * 1024)).toFixed(2) + "MB"
                    });
                }
            }

            if (aOversizedFiles.length > 0) {
                var sMessage = "The following files exceed the 5MB size limit:\n\n";
                aOversizedFiles.forEach(function (file) {
                    sMessage += `• ${file.name} (${file.size})\n`;
                });
                sMessage += "\nPlease reduce file sizes and try again.";

                MessageBox.error(sMessage, {
                    title: "File Size Limit Exceeded",
                    actions: [MessageBox.Action.OK],
                    styleClass: "sapUiSizeCompact"
                });

                oFileUploader.setValue(""); // Clear the file input
                return;
            }

            // Rest of the upload logic remains the same...
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: uploadby,
                            uploadedOn: sUploadedOn,
                            // deleteTabVisible: true,
                            size: file.size
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            // MessageBox.success(`Successfully added ${aFiles.length} file(s) for upload.`, {
                            //     actions: [MessageBox.Action.OK]
                            // });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageBox.error(`Error reading file: ${file.name}`, {
                            actions: [MessageBox.Action.OK]
                        });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },


        onUploadPress: function () {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var sUploadedBy = "Current User";

            aAttachments = aAttachments.filter(function (item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function (file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function (e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            createdBy: sUploadedBy,
                            createdAt: sUploadedOn,
                            // deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function () {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function (oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function (oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function (oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function () {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function (sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function (oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function (oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function (oData) {
                return oData.getKey() === "fileName";
            }).getValue();
            var iIndex = aAttachments.findIndex(function (oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var that = this;

            MessageBox.confirm("Are you sure you want to delete the file '" + sFileName + "'?", {
                title: "Confirm Deletion",
                onClose: function (sAction) {
                    if (sAction === MessageBox.Action.OK) {
                        var oModelV2 = that.getOwnerComponent().getModel("approvalservicev2");
                        var sPath = "/ReqAttachments(guid'" + sID + "')";

                        oModelV2.remove(sPath, {
                            success: function () {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            },
                            error: function (oError) {
                                that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                                MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                            }
                        });
                    } else {
                        MessageToast.show("Deletion canceled.", { position: "bottom center" });
                    }
                }
            });
        },

        _removeAttachmentFromLocalModel: function (oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChangeLimit1500: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 1500) {
                oTextArea.setValue(sValue.substring(0, 1500));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 1500 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        handleRemarkChangeLimit4000: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();

            if (sValue.length > 4000) {
                oTextArea.setValue(sValue.substring(0, 4000));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 4000 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        onTextInputLiveChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sValue = oInput.getValue();
        
            // Allow only letters, numbers, and periods
            var filteredValue = sValue.replace(/[^a-zA-Z0-9.]/g, '');
        
            if (filteredValue !== sValue) {
                oInput.setValue(filteredValue);
            }
        
            if (filteredValue) {
                oInput.setValueState("None");
                oInput.setValueStateText("");
            }
        },
        

        onGetCurrUserforUploadon: function () {
            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            oModel.read("/getCurrentUser", {
                urlParameters: {
                    dept: 'SSFD'
                },
                success: function (oData) {
                    that.uploadbyEmail = oData.email;
                    var oUserModel = new sap.ui.model.json.JSONModel({ user: oData });
                    that.getView().setModel(oUserModel, "CurrentUser");
                },
                error: function (oError) {
                    console.error("Error fetching current user:", oError);
                }
            });
        },
    });
});

UPDATED CODE 12

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                enableFinalAccount: false,
                enableFinalAccountInput: false,
                sendbackbuttonvisiblity: false,
                remarkModel: "",
                approverRequiredVisible: false,
                currentUserRole: ""
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                // timelineItems: [
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ankit Pathak Created a Request",
                //         text: "Data Save",
                //         userName: "Ankit Pathak",
                //         userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 6:00 PM",
                //         title: "Yugal Created a Request",
                //         text: "Data Submit",
                //         userName: "Yugal",
                //         userPicture: "https://ui-avatars.com/api/?name=Yugal"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ayushi Mam added a note [Approved]",
                //         text: "Submitted.",
                //         userName: "Ayushi Mam",
                //         userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Aakib Mohd added a note [Approved]",
                //         text: "Done.",
                //         userName: "Aakib Mohd",
                //         userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                //     }
                // ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");

                        if (that.stagesData === "Final Accounts" && that.statusData === "Pending") {
                            oViewModel.setProperty("/enableFinalAccount", true);
                            oViewModel.setProperty("/enableFinalAccountInput", true);  
                        } else {
                            oViewModel.setProperty("/enableFinalAccount", false);
                            oViewModel.setProperty("/enableFinalAccountInput", false);
                        }

                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", that._ApprovedCheck === "Approved");
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                            oViewModel.setProperty("/approverRequiredVisible", true);
                            var costoverrunShowApprover = oData.results[0].ssfdDtl.subType;
                            if (that.stagesData == "GM PMO" && costoverrunShowApprover == "COR") {
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true); 
                            } else {
                                oViewModel.setProperty("/isApproverScreen", false);
                                oViewModel.setProperty("/enableRowActionsapproval", false); 
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false); 
                        }
                        
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);

                        // Populate fields with saved data
                        that._populateFormFields(oData.results[0].ssfdDtl);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        }
                        
                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);

                        // Populate fields with saved data
                        that._populateFormFields(oData.results[0].ssfdDtl);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);  

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt desc"
                },
                success: function(oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function(oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "Yet to be Approved"
                            };
                        });

                        var initiatorIndex = aProcessedData.findIndex(function(item) {
                            return item.role.toLowerCase().includes("initiator");
                        });

                        if (initiatorIndex > -1) {
                            var initiatorEntry = aProcessedData.splice(initiatorIndex, 1)[0];
                            aProcessedData.push(initiatorEntry);
                        }

                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        formatTimelineTitle: function(role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {
                    Name: "SSFD"
                });
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {
                    Name: "SSFD"
                });
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            sap.ui.core.BusyIndicator.show(0);

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                        that._populateFormFields(oSsfdDtl); // Populate fields after save
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                        that._populateFormFields(oSsfdDtl); // Populate fields after update
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" },
                { control: oView.byId("_IDGenTextArea"), field: "Background/Current Scenario" },
                { control: oView.byId("_IDGenTextArea1"), field: "Proposal/Justification" },
                { control: oView.byId("_IDGenTextArea2"), field: "Deliverables" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var control = item.control;
                var value = control.getValue ? control.getValue().trim() : control.getSelectedKey();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");
            var validSubTypes = ["NR", "COR", "CBCF", "OTH"];

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;

            if (aItems[iIndex].nature === "Capital Budget" && validSubTypes.includes(this._onSubType)) {
                aItems[iIndex].contingency = Number((aItems[iIndex].amount * 0.05).toFixed(2));
            } else {
                aItems[iIndex].contingency = 0;
            }

            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);

            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            
            var isValid = true;
            
            ["wbsInput", "costCenterInput"].forEach(function (id) {
                var input = oView.byId(id);
                var value = input.getValue().trim();
                if (!value) {
                    input.setValueState("Error");
                    input.setValueStateText("This field is required.");
                    isValid = false;
                }
            });
            
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : "",
                WBSNumber: oView.byId("wbsInput").getValue()||"",
                costCentre: oView.byId("costCenterInput").getValue()||""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                        sap.ui.core.BusyIndicator.hide();
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                        that._populateFormFields(oSsfdDtl); // Populate fields after submission
                        that.remarksDialog.close();
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        that._populateFormFields(oSsfdDtl); // Populate fields after submission
                        that.remarksDialog.close();
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },        
            
        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChangeLimit1500: function (oEvent) {
            var oTextArea = oEvent.getSource();
            var sValue = oTextArea.getValue();
        
            if (sValue.length > 1500) {
                oTextArea.setValue(sValue.substring(0, 1500));
                oTextArea.setValueState("Error");
                oTextArea.setValueStateText("Maximum 1500 characters allowed.");
            } else {
                oTextArea.setValueState("None");
            }
        },

        onTextInputLiveChange: function (oEvent) {
            var oInput = oEvent.getSource();
            var sValue = oInput.getValue();
      
            var filteredValue = sValue.replace(/[^a-zA-Z0-9]/g, '');
      
            if (filteredValue !== sValue) {
              oInput.setValue(filteredValue);
            }
            if (filteredValue) {
              oInput.setValueState("None");
              oInput.setValueStateText("");
            }
          },

        _populateFormFields: function(oSsfdDtl) {
            var oView = this.getView();
            if (oSsfdDtl) {
                oView.byId("division").setSelectedKey(oSsfdDtl.division || "");
                oView.byId("department_sensce").setSelectedKey(oSsfdDtl.puDept || "");
                oView.byId("Hod_SanctionData").setSelectedKey(oSsfdDtl.hod || "");
                oView.byId("comboLocation_Senca").setSelectedKey(oSsfdDtl.loc || "");
                oView.byId("inputProjectName").setValue(oSsfdDtl.projName || "");
                oView.byId("inputItemRequired").setValue(oSsfdDtl.itemRequiredDesc || "");
                oView.byId("BudgetValue").setValue(oSsfdDtl.budgetRequired ? oSsfdDtl.budgetRequired.toString() : "");
                oView.byId("inputIRR").setValue(oSsfdDtl.irr || "");
                oView.byId("comboMarket_Senca").setSelectedKey(oSsfdDtl.market || "");
                oView.byId("dateImplement").setDateValue(oSsfdDtl.implDt || null);
                oView.byId("inputHour").setValue(oSsfdDtl.enggHours || "");
                oView.byId("_IDGenTextArea").setValue(oSsfdDtl.background || "");
                oView.byId("_IDGenTextArea1").setValue(oSsfdDtl.justification || "");
                oView.byId("_IDGenTextArea2").setValue(oSsfdDtl.deliverables || "");

                // Update budget model
                var oBudgetModel = oView.getModel("budgetModel");
                var aItems = oBudgetModel.getProperty("/items");
                aItems[0].amount = oSsfdDtl.capitalBudget || 0;
                aItems[0].contingency = aItems[0].nature === "Capital Budget" && ["NR", "COR", "CBCF", "OTH"].includes(this._onSubType) ? Number((aItems[0].amount * 0.05).toFixed(2)) : 0;
                aItems[0].total = Number((aItems[0].amount + aItems[0].contingency).toFixed(2));
                aItems[1].amount = oSsfdDtl.revenueBudget || 0;
                aItems[1].contingency = 0;
                aItems[1].total = aItems[1].amount;
                aItems[2].amount = oSsfdDtl.personnelCost || 0;
                aItems[2].contingency = 0;
                aItems[2].total = aItems[2].amount;
                aItems[3].amount = Number((aItems[0].amount + aItems[1].amount + aItems[2].amount).toFixed(2));
                aItems[3].contingency = Number((aItems[0].contingency + aItems[1].contingency + aItems[2].contingency).toFixed(2));
                aItems[3].total = Number((aItems[3].amount + aItems[3].contingency).toFixed(2));
                oBudgetModel.setProperty("/items", aItems);
                oBudgetModel.refresh(true);
                oView.byId("BudgetValue").setValue(aItems[3].total.toString());
                this._updateIRREnabledState(aItems[3].total);

                // Set approver if applicable
                if (this._ApprovedCheck === "Approved" && oSsfdDtl.selectedApprover) {
                    oView.byId("approverRequiredFrom").setSelectedKey(oSsfdDtl.selectedApprover);
                }
            }
        }
    });
});

UPDATED CODE 11

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend ("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            // this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            // this.getView().addDependent(this.remarksDialog);

            this.remarksDialog = sap.ui.xmlfragment(this.getView().getId(), "com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                sendbackbuttonvisiblity: false,
                remarkModel: "",
                approverRequiredVisible: false, // New property for approver field visibility
                currentUserRole: ""
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                // timelineItems: [
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ankit Pathak Created a Request",
                //         text: "Data Save",
                //         userName: "Ankit Pathak",
                //         userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 6:00 PM",
                //         title: "Yugal Created a Request",
                //         text: "Data Submit",
                //         userName: "Yugal",
                //         userPicture: "https://ui-avatars.com/api/?name=Yugal"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ayushi Mam added a note [Approved]",
                //         text: "Submitted.",
                //         userName: "Ayushi Mam",
                //         userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Aakib Mohd added a note [Approved]",
                //         text: "Done.",
                //         userName: "Aakib Mohd",
                //         userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                //     }
                // ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
            
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                             //forapproavl
                             oViewModel.setProperty("/isApproverScreen", false);
                             oViewModel.setProperty("/enableRowActionsapproval", false);  

                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", that._ApprovedCheck === "Approved");
                             //forapproavl
                             oViewModel.setProperty("/isApproverScreen", false);
                             oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                            
                        }

                        if (that._ApprovedCheck === "Approved"  && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                            oViewModel.setProperty("/approverRequiredVisible", true);
                            //for approval
                            var costoverrunShowApprover = oData.results[0].ssfdDtl.subType;
                            if(that.stagesData =="GM PMO" && costoverrunShowApprover == "COR"){
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true); 
                            }else{
                                oViewModel.setProperty("/isApproverScreen", false);
                                oViewModel.setProperty("/enableRowActionsapproval", false); 
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false); 
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COR";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            //forapproavl
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);  
            //*** */

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt desc"
                },
                success: function(oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function(oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "No remarks provided"
                            };
                        });

                        // Find and move Initiator to bottom
                        var initiatorIndex = aProcessedData.findIndex(function(item) {
                            return item.role.toLowerCase().includes("initiator");
                        });

                        if (initiatorIndex > -1) {
                            var initiatorEntry = aProcessedData.splice(initiatorIndex, 1)[0];
                            aProcessedData.push(initiatorEntry);
                        }

                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        formatTimelineTitle: function(role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                urlParameters: {
                    "$filter": "department eq 'SSFD' and role eq 'HOD'"
                  },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            sap.ui.core.BusyIndicator.show(0);

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSavePayload = {
                stage: "Initiator",
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                        sap.ui.core.BusyIndicator.hide();
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },        
            
        

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});


UPDATED CODE 10

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                sendbackbuttonvisiblity: false,
                remarkModel: "",
                approverRequiredVisible: false, // New property for approver field visibility
                currentUserRole: ""
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                // timelineItems: [
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ankit Pathak Created a Request",
                //         text: "Data Save",
                //         userName: "Ankit Pathak",
                //         userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 6:00 PM",
                //         title: "Yugal Created a Request",
                //         text: "Data Submit",
                //         userName: "Yugal",
                //         userPicture: "https://ui-avatars.com/api/?name=Yugal"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Ayushi Mam added a note [Approved]",
                //         text: "Submitted.",
                //         userName: "Ayushi Mam",
                //         userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                //     },
                //     {
                //         dateTime: "7/22/2016 at 3:00 PM",
                //         title: "Aakib Mohd added a note [Approved]",
                //         text: "Done.",
                //         userName: "Aakib Mohd",
                //         userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                //     }
                // ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
            
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                             //forapproavl
                             oViewModel.setProperty("/isApproverScreen", false);
                             oViewModel.setProperty("/enableRowActionsapproval", false);  

                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", that._ApprovedCheck === "Approved");
                             //forapproavl
                             oViewModel.setProperty("/isApproverScreen", false);
                             oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                            
                        }

                        if (that._ApprovedCheck === "Approved"  && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                            oViewModel.setProperty("/approverRequiredVisible", true);
                            //for approval
                            var costoverrunShowApprover = oData.results[0].ssfdDtl.subType;
                            if(that.stagesData =="GM PMO" && costoverrunShowApprover == "COV"){
                                oViewModel.setProperty("/isApproverScreen", true);
                                oViewModel.setProperty("/enableRowActionsapproval", true); 
                            }else{
                                oViewModel.setProperty("/isApproverScreen", false);
                                oViewModel.setProperty("/enableRowActionsapproval", false); 
                            }
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false); 
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/approverRequiredVisible", false);
                            //forapproavl
                            oViewModel.setProperty("/isApproverScreen", false);
                            oViewModel.setProperty("/enableRowActionsapproval", false);  
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COV";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/approverRequiredVisible", false);
            //forapproavl
            oViewModel.setProperty("/isApproverScreen", false);
            oViewModel.setProperty("/enableRowActionsapproval", false);  
            //*** */

            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt desc"
                },
                success: function(oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function(oLog) {
                            // return {
                            //     createdAt: oLog.createdAt,
                            //     role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                            //     userName: oLog.userName || "Unknown User",
                            //     userEmail: oLog.userEmail || "N/A",
                            //     remarks: oLog.remarks || "No remarks provided"
                            // };
                        });

                        // Find and move Initiator to bottom
                        var initiatorIndex = aProcessedData.findIndex(function(item) {
                            return item.role.toLowerCase().includes("initiator");
                        });

                        if (initiatorIndex > -1) {
                            var initiatorEntry = aProcessedData.splice(initiatorIndex, 1)[0];
                            aProcessedData.push(initiatorEntry);
                        }

                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        formatTimelineTitle: function(role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            sap.ui.core.BusyIndicator.show(0);

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments"),
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", this._ApprovedCheck === "Approved");
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            oView.getModel("viewenableddatacheck").setProperty("/approverRequiredVisible", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                        sap.ui.core.BusyIndicator.hide();
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0,
                selectedApprover: this._ApprovedCheck === "Approved" ? oView.byId("approverRequiredFrom").getSelectedKey() : ""
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

UPDATED CODE 9

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                sendbackbuttonvisiblity: false,
                remarkModel: "",
                isApproved: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: []
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", statusDatacheck === "Approved");
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                            oViewModel.setProperty("/isApproved", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                            oViewModel.setProperty("/isApproved", true);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if (onInitiateValue === "New Requirement") {
                onInitiateValueData = "NR";
            } else if (onInitiateValue === "Contingency") {
                onInitiateValueData = "CON";
            } else if (onInitiateValue === "Interline Transfer") {
                onInitiateValueData = "ILT";
            } else if (onInitiateValue === "Budget Carry-Forward") {
                onInitiateValueData = "BCF";
            } else if (onInitiateValue === "Savings") {
                onInitiateValueData = "SAVING";
            } else if (onInitiateValue === "Interhead Transfer") {
                onInitiateValueData = "ITH";
            } else if (onInitiateValue === "Cost Over-Run") {
                onInitiateValueData = "COV";
            } else if (onInitiateValue === "Preproject Approval") {
                onInitiateValueData = "PPA";
            } else if (onInitiateValue === "Capex Budget Carry-Forward") {
                onInitiateValueData = "CBCF";
            } else if (onInitiateValue === "Others") {
                onInitiateValueData = "OTH";
            }
            this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            oViewModel.setProperty("/isApproved", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                    sap.ui.core.BusyIndicator.hide();
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt desc"
                },
                success: function(oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function(oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "No remarks provided"
                            };
                        });

                        // Find and move Initiator to bottom
                        var initiatorIndex = aProcessedData.findIndex(function(item) {
                            return item.role.toLowerCase().includes("initiator");
                        });

                        if (initiatorIndex > -1) {
                            var initiatorEntry = aProcessedData.splice(initiatorIndex, 1)[0];
                            aProcessedData.push(initiatorEntry);
                        }

                        var oJSONModel = new JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");

                        // Check if any log entry indicates approval
                        var isApproved = aProcessedData.some(function(item) {
                            return item.remarks.toLowerCase().includes("approved") || item.role.toLowerCase().includes("approved");
                        });
                        oView.getModel("viewenableddatacheck").setProperty("/isApproved", isApproved);
                        if (isApproved) {
                            that.statusData = "Approved";
                            oView.getModel("Requestservicemodel").setProperty("/status", "Approved");
                        }
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        formatTimelineTitle: function(role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            sap.ui.core.BusyIndicator.show(0);

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                            sap.ui.core.BusyIndicator.hide();
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                            sap.ui.core.BusyIndicator.hide();
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if (statusData === "Sent Back") {
                satauscheckdata = "Sent Back";
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            this.getView().getModel("viewenableddatacheck").setProperty("/remarkModel", "");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Reject.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before Approve.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            sap.ui.core.BusyIndicator.show(0);

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        sap.ui.core.BusyIndicator.hide();
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        sap.ui.core.BusyIndicator.hide();
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        sap.ui.core.BusyIndicator.hide();
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                    that.getView().getModel("viewenableddatacheck").setProperty("/isApproved", true);
                    that.statusData = "Approved";
                    that.getView().getModel("Requestservicemodel").setProperty("/status", "Approved");
                    that.onFetchTimelinessData();
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = this.getView().getModel("viewenableddatacheck").getProperty("/remarkModel");
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;
            sap.ui.core.BusyIndicator.show(0);

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                sap.ui.core.BusyIndicator.hide();
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    sap.ui.core.BusyIndicator.hide();
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });

            if (iIndex === -1) {
                MessageToast.show("Attachment not found.", { position: "bottom center" });
                return;
            }

            var sFileName = aAttachments[iIndex].fileName;
            var that = this;

            MessageBox.confirm("Are you sure you want to delete the attachment: " + sFileName + "?", {
                onClose: function(oAction) {
                    if (oAction === MessageBox.Action.OK) {
                        var oModelV2 = that.getOwnerComponent().getModel("approvalservicev2");
                        var sPath = "/ReqAttachments(guid'" + sID + "')";

                        oModelV2.remove(sPath, {
                            success: function() {
                                aAttachments.splice(iIndex, 1);
                                oModel.setProperty("/attachments", aAttachments);
                                oModel.refresh(true);
                                MessageToast.show("Attachment deleted successfully: " + sFileName, { position: "bottom center" });
                            },
                            error: function(oError) {
                                // If server deletion fails, remove locally
                                aAttachments.splice(iIndex, 1);
                                oModel.setProperty("/attachments", aAttachments);
                                oModel.refresh(true);
                                MessageToast.show("Attachment deleted locally: " + sFileName, { position: "bottom center" });
                                console.error("Error deleting attachment:", oError);
                            }
                        });
                    }
                }
            });
        }
    });
});

UPDATED CODE 8

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                sendbackbuttonvisiblity: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD" )) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if(onInitiateValue === "New Requirement"){
                onInitiateValueData = "NR"
                            }else if(onInitiateValue === "Contingency"){
                                    onInitiateValueData = "CON"
                            }else if(onInitiateValue === "Interline Transfer"){
                                onInitiateValueData = "ILT"
                        }else if(onInitiateValue === "Budget Carry-Forward"){
                            onInitiateValueData = "BCF"
                    }else if(onInitiateValue === "Savings"){
                        onInitiateValueData = "SAVING"
                }else if(onInitiateValue === "Interhead Transfer"){
                    onInitiateValueData = "ITH"
                }else if(onInitiateValue === "Cost Over-Run"){
                    onInitiateValueData = "COV"
                }else if(onInitiateValue === "Preproject Approval"){
                    onInitiateValueData = "PPA"
                }else if(onInitiateValue === "Capex Budget Carry-Forward"){
                    onInitiateValueData = "CBCF"
                }else if(onInitiateValue === "Others"){
                    onInitiateValueData = "OTH"
                }
                this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt desc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                remarks: oLog.remarks || "No remarks provided"
                            };
                        });
        
                        // Find and move Initiator to bottom
                        var initiatorIndex = aProcessedData.findIndex(function (item) {
                            return item.role.toLowerCase().includes("initiator");
                        });
        
                        if (initiatorIndex > -1) {
                            var initiatorEntry = aProcessedData.splice(initiatorIndex, 1)[0];
                            aProcessedData.push(initiatorEntry); // Add to end
                        }
        
                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },        
       
        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },        
             
 

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if(statusData === "Sent Back"){
                satauscheckdata = "Sent Back"
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },
       
        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },
        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);



                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },
        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
        
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },
        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },
        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

UPDATED CODE 7

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false,
                sendbackbuttonvisiblity: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD" )) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck || statusDatacheck === "Send Back") {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var onInitiateValue = localStorage.getItem("onInitiateValue");
            var onInitiateValueData = "";
            if(onInitiateValue === "New Requirement"){
                onInitiateValueData = "NR"
                            }else if(onInitiateValue === "Contingency"){
                                    onInitiateValueData = "CON"
                            }else if(onInitiateValue === "Interline Transfer"){
                                onInitiateValueData = "ILT"
                        }else if(onInitiateValue === "Budget Carry-Forward"){
                            onInitiateValueData = "BCF"
                    }else if(onInitiateValue === "Savings"){
                        onInitiateValueData = "SAVING"
                }else if(onInitiateValue === "Interhead Transfer"){
                    onInitiateValueData = "ITH"
                }else if(onInitiateValue === "Cost Over-Run"){
                    onInitiateValueData = "COV"
                }else if(onInitiateValue === "Preproject Approval"){
                    onInitiateValueData = "PPA"
                }else if(onInitiateValue === "Capex Budget Carry-Forward"){
                    onInitiateValueData = "CBCF"
                }else if(onInitiateValue === "Others"){
                    onInitiateValueData = "OTH"
                }
                this._onSubType = onInitiateValueData;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
       
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt asc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                userPicture: oLog.userPicture || "sap-icon://employee",
                                // remarks: oLog.remarks || "No remarks provided"
                            };
                        });
       
                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },
       
        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },
             
 

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";
            if(statusData === "Sent Back"){
                satauscheckdata = "Sent Back"
            }
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },
       
        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", false);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", true);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
            oView.getModel("viewenableddatacheck").setProperty("/sendbackbuttonvisiblity", true);
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblityData", false);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },
        onSendbackData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.sendbackdatacheckApproved(oData.reqID);



                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.sendbackdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },
        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var subtypedata = this._onSubType;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
        
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                subType: subtypedata,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "HOD",
                status: "Pending",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },
        sendbackdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SENT BACK",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request Sent Back successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },
        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});


UPDATED CODE 6

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function () {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
        
            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                urlParameters: {
                    "$orderby": "createdAt asc"
                },
                success: function (oData) {
                    if (oData && oData.results) {
                        var aProcessedData = oData.results.map(function (oLog) {
                            return {
                                createdAt: oLog.createdAt,
                                role: oLog.stage ? "[" + oLog.stage + "]" : "[N/A]",
                                userName: oLog.userName || "Unknown User",
                                userEmail: oLog.userEmail || "N/A",
                                userPicture: oLog.userPicture || "sap-icon://employee",
                                remarks: oLog.remarks || "No remarks provided"
                            };
                        });
        
                        var oJSONModel = new sap.ui.model.json.JSONModel({
                            results: aProcessedData
                        });
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function (oError) {
                    sap.m.MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },
        
        formatTimelineTitle: function (role, userName, userEmail) {
            return role + " " + userName + " (" + userEmail + ")";
        },        
        

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

NEW CODE 5

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

NEW CODE 4

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.readPETE("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000;
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            var missingFields = [];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                var value = item.control.getSelectedKey() || item.control.getValue();
                if (!value) {
                    item.control.setValueState("Error");
                    isValid = false;
                    missingFields.push(item.field);
                } else if (item.control.getId().includes("inputHour")) {
                    var hours = parseFloat(value);
                    if (isNaN(hours) || hours <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                        missingFields.push(item.field + " (must be a positive number)");
                    }
                }
            });

            if (!isValid) {
                var errorMessage = "Please fill all required fields: " + missingFields.join(", ");
                MessageBox.error(errorMessage);
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? Number((aItems[iIndex].amount * 0.05).toFixed(2)) : 0;
            aItems[iIndex].total = Number((aItems[iIndex].amount + aItems[iIndex].contingency).toFixed(2));

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = Number(iTotalAmount.toFixed(2));
            aItems[3].contingency = Number(iTotalContingency.toFixed(2));
            aItems[3].total = Number((iTotalAmount + iTotalContingency).toFixed(2));

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    // console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

NEW CODE 3

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            // Initialize budget model
       

            // Initialize attachment model
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            // Initialize router and route handlers
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            // Initialize remarks dialog
            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            // Initialize view model
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            // Initialize timeline model
            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.readPETE("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;
                        that.stagesData = oData.results[0].stage;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", true);
                        } else {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID); // Use dynamic reqID
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = statusDatacheck;

                        var oViewModel = that.getView().getModel("viewenableddatacheck");
                        if (statusDatacheck === "Draft" || !statusDatacheck) {
                            oViewModel.setProperty("/enableRowActions", true);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            oViewModel.setProperty("/enableRowActions", false);
                            oViewModel.setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID); // Use dynamic reqID
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                    console.error("Error fetching request data:", oError);
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            var oViewModel = this.getView().getModel("viewenableddatacheck");
            oViewModel.setProperty("/enableRowActions", true);
            oViewModel.setProperty("/enableIRR", false);
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
            this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
          //  this.onBudgetDetailDataFetch(""); // No reqID for new form
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var oBudgetModel = oView.getModel("budgetModel");
            var that = this;
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    var oJSONModel = new JSONModel(oData);
                    oView.setModel(oJSONModel, "budgetModel");
                },
                error: function(oError) {
                    console.error("Error fetching budget data:", oError);
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = (totalBudget * 100000) > 30000000; // Convert lacs to rupees
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error("Error fetching timeliness data:", oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error("Error fetching attachment data:", oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                    console.error("Error fetching HOD data:", oError);
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                    console.error("Error fetching department data:", oError);
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                    console.error("Error fetching market data:", oError);
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                    console.error("Error fetching location data:", oError);
                }
            });
        },

        onDashboardui: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else if (this._SanctionfdNameUI === "SSFD") {
                oRouter.navTo("DashboardUI", { Name: "SSFD" });
            }
        },

        onCancelSanctionform: function() {
            var oRouter = this.getOwnerComponent().getRouter();
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", { Name: this._SanctionfdNameUI });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments") || [];
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            aFilesData.forEach(function(file) {
                if (!file.fileName || file.uploaded) return;

                if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                    var base64Content = file.content.split(',')[1];
                    var payload = {
                        fileName: file.fileName,
                        content: base64Content,
                        mediaType: file.mimeType || "text/plain",
                        reqID: reqid
                    };

                    oModel.create("/ReqAttachments", payload, {
                        success: function() {
                            file.uploaded = true;
                            oModelTabdata.refresh(true);
                        },
                        error: function(oError) {
                            MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            console.error("Error uploading attachment:", oError);
                        }
                    });
                }
            });
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData || "Draft";
            var satauscheckdata = statusData === "Pending" ? "Pending" : "Draft";

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqID = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        MessageBox.success("Request saved successfully!");
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID)
                        MessageBox.success("Request updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: oView.getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved.", { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;
            var oView = this.getView();
            var controls = [
                { control: oView.byId("comboLocation_Senca"), field: "Location" },
                { control: oView.byId("department_sensce"), field: "Department" },
                { control: oView.byId("comboMarket_Senca"), field: "Market" },
                { control: oView.byId("Hod_SanctionData"), field: "HOD" },
                { control: oView.byId("inputHour"), field: "Engineering Hours" }
            ];

            controls.forEach(function(item) {
                item.control.setValueState("None");
                if (!item.control.getSelectedKey && !item.control.getValue()) {
                    item.control.setValueState("Error");
                    isValid = false;
                } else if (item.control.getId().includes("inputHour")) {
                    var value = item.control.getValue();
                    if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                        item.control.setValueState("Error");
                        isValid = false;
                    }
                }
            });

            if (!isValid) {
                MessageBox.error("Please fill all required fields including Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }
            oInput.setValueState("None");

            aItems[iIndex].amount = fValue || 0;
            aItems[iIndex].contingency = aItems[iIndex].nature === "Capital Budget" ? aItems[iIndex].amount * 0.05 : 0;
            aItems[iIndex].total = aItems[iIndex].amount + aItems[iIndex].contingency;

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[3].amount = iTotalAmount;
            aItems[3].contingency = iTotalContingency;
            aItems[3].total = iTotalAmount + iTotalContingency;

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
            this.getView().byId("BudgetValue").setValue(aItems[3].total.toString());
            this._updateIRREnabledState(aItems[3].total);
        },

        onHoursChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var value = oEvent.getParameter("value");
            oInput.setValueState("None");

            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                oInput.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);
            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var oView = this.getView();
            var hours = oView.byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            oView.getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            oView.getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);
            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.rejecteddatacheckRejected(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request rejected successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                    console.error("Error rejecting request:", oError);
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.approverdatacheckApproved(oData.reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (!remarkInput) {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }

            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: remarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: remarkInput,
                ssfdDtl: oSsfdDtl
            };

            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            if (!reqid) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        that.attachmentuploadFilesData(oData.reqID);
                        var reqID = oData.reqID;
                      
                        that.approverdatacheck(oData.reqID);
                        var oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel") || new JSONModel();
                        that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        oRequestServiceModel.setData(oData);
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                        console.error("Error saving request:", oError);
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function() {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        var reqID = reqid;
                        that.onBudgetDetailDataFetch(reqID);
                    },
                    error: function(oError) {
                        MessageToast.show("Error updating request: " + oError.message, { position: "bottom center" });
                        console.error("Error updating request:", oError);
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function() {
                    MessageBox.success("Request approved successfully!", {
                        onClose: function() {
                            if (that._ApprovedCheck === "Approved") {
                                that.getOwnerComponent().getRouter().navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                    console.error("Error approving request:", oError);
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var remarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: remarkInput
            };
            var that = this;

            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request submitted successfully!", {
                        onClose: function() {
                            if (that._SanctionfdNameUI === "SSFD") {
                                that.getOwnerComponent().getRouter().navTo("DashboardUI", { Name: "SSFD" });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                    console.error("Error submitting request:", oError);
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
                console.error("Error downloading file:", e);
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;

            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function(oError) {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                    console.error("Error deleting attachment:", oError);
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});

NEW CODE 2 
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");

            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");

            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            this.remarksDialog = sap.ui.xmlfragment("com.mmapprovalhub.approvalhub.Fragments.remarks", this);
            this.getView().addDependent(this.remarksDialog);

            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false,
                enableIRR: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;
                        that.stagesData = oData.results[0].stage;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", true);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            var basedNameUI = oArgs.basedNameUISSFD;
            this._SanctionfdNameUI = basedNameUI;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            this.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", false);

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel");
            if (!oRequestServiceModel) {
                oRequestServiceModel = new JSONModel();
                this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            }
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onBudgetDetailDataFetch("");
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            var oDefaultBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Personnel Cost", amount: 0, contingency: 0, total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };

            if (!reqID) {
                var oBudgetModel = oView.getModel("budgetModel");
                oBudgetModel.setData(oDefaultBudgetData);
                oBudgetModel.refresh(true);
                oView.byId("BudgetValue").setValue("0");
                oView.getModel("viewenableddatacheck").setProperty("/enableIRR", false);
                return;
            }

            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    if (oData && oData.reqID) {
                        var oBudgetData = {
                            items: [
                                {
                                    nature: "Capital Budget",
                                    amount: parseFloat(oData.capitalBudget) || 0,
                                    contingency: parseFloat(oData.capitalBudget) * 0.05 || 0,
                                    total: (parseFloat(oData.capitalBudget) || 0) + (parseFloat(oData.capitalBudget) * 0.05 || 0)
                                },
                                {
                                    nature: "Revenue Budget",
                                    amount: parseFloat(oData.revenueBudget) || 0,
                                    contingency: 0,
                                    total: parseFloat(oData.revenueBudget) || 0
                                },
                                {
                                    nature: "Personnel Cost",
                                    amount: parseFloat(oData.personnelCost) || 0,
                                    contingency: 0,
                                    total: parseFloat(oData.personnelCost) || 0
                                },
                                {
                                    nature: "Total",
                                    amount: (parseFloat(oData.capitalBudget) || 0) + (parseFloat(oData.revenueBudget) || 0) + (parseFloat(oData.personnelCost) || 0),
                                    contingency: parseFloat(oData.capitalBudget) * 0.05 || 0,
                                    total: (parseFloat(oData.capitalBudget) || 0) + (parseFloat(oData.revenueBudget) || 0) + (parseFloat(oData.personnelCost) || 0) + (parseFloat(oData.capitalBudget) * 0.05 || 0)
                                }
                            ]
                        };
                        var oBudgetModel = oView.getModel("budgetModel");
                        oBudgetModel.setData(oBudgetData);
                        oBudgetModel.refresh(true);
                        oView.byId("BudgetValue").setValue(oBudgetData.items[oBudgetData.items.length - 1].total.toString());
                        that._updateIRREnabledState(oBudgetData.items[oBudgetData.items.length - 1].total);
                    } else {
                        var oBudgetModel = oView.getModel("budgetModel");
                        oBudgetModel.setData(oDefaultBudgetData);
                        oBudgetModel.refresh(true);
                        oView.byId("BudgetValue").setValue("0");
                        oView.getModel("viewenableddatacheck").setProperty("/enableIRR", false);
                    }
                },
                error: function(oError) {
                    var oBudgetModel = oView.getModel("budgetModel");
                    oBudgetModel.setData(oDefaultBudgetData);
                    oBudgetModel.refresh(true);
                    oView.byId("BudgetValue").setValue("0");
                    oView.getModel("viewenableddatacheck").setProperty("/enableIRR", false);
                    MessageToast.show("Failed to load budget data.", { position: "bottom center" });
                }
            });
        },

        _updateIRREnabledState: function(totalBudget) {
            var enableIRR = totalBudget * 100000 > 30000000; // Convert lacs to rupees
            this.getView().getModel("viewenableddatacheck").setProperty("/enableIRR", enableIRR);
            if (!enableIRR) {
                this.getView().byId("inputIRR").setValue("");
            }
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load process log data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                }
            });
        },

        onDashboardui: function() {
            var Approved = this._ApprovedCheck;
            if (Approved === "Approved") {
                var oRouter = this.getOwnerComponent().getRouter();
                oRouter.navTo("approverdashboard", {});
            } else {
                var Name = this._SanctionfdNameUI;
                if (Name === "SSFD") {
                    var oRouter = this.getOwnerComponent().getRouter();
                    oRouter.navTo("DashboardUI", {
                        Name: "SSFD"
                    });
                }
            }
        },

        onCancelSanctionform: function() {
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
            var oRouter = this.getOwnerComponent().getRouter();
            if (this._ApprovedCheck === "Approved") {
                oRouter.navTo("approverdashboard", {});
            } else {
                oRouter.navTo("DashboardUI", {
                    Name: this._SanctionfdNameUI
                });
            }
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments");
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            if (aFilesData) {
                aFilesData.forEach(function(file) {
                    if (!file.fileName || file.uploaded) return;

                    if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                        var base64Content = file.content.split(',')[1];
                        var payload = {
                            fileName: file.fileName,
                            content: base64Content,
                            mediaType: file.mimeType || "text/plain",
                            reqID: reqid
                        };

                        oModel.create("/ReqAttachments", payload, {
                            success: function() {
                                file.uploaded = true;
                            },
                            error: function() {
                                MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            }
                        });
                    }
                });
            }
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData;
            var satauscheckdata = "";
            if (statusData === "" || statusData === null || statusData === undefined) {
                satauscheckdata = "Draft";
            } else if (statusData === "Draft") {
                satauscheckdata = "Draft";
            } else if (statusData === "Pending") {
                satauscheckdata = "Pending";
            }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            if (!this._reqIDData) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request saved successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request Updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                location: oView.byId("comboLocation_Senca").getSelectedKey(),
                budget: oView.byId("BudgetValue").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("department_sensce").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                attachments: this.getView().getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved: " + JSON.stringify(oFormData), { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;

            var location = this.getView().byId("comboLocation_Senca");
            var department = this.getView().byId("department_sensce");
            var market = this.getView().byId("comboMarket_Senca");
            var hod = this.getView().byId("Hod_SanctionData");
            var hours = this.getView().byId("inputHour");

            location.setValueState("None");
            department.setValueState("None");
            market.setValueState("None");
            hod.setValueState("None");
            hours.setValueState("None");

            if (!location.getSelectedKey()) {
                location.setValueState("Error");
                isValid = false;
            }
            if (!department.getSelectedKey()) {
                department.setValueState("Error");
                isValid = false;
            }
            if (!market.getSelectedKey()) {
                market.setValueState("Error");
                isValid = false;
            }
            if (!hod.getSelectedKey()) {
                hod.setValueState("Error");
                isValid = false;
            }
            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                isValid = false;
            }

            if (!isValid) {
                MessageBox.error("Please fill all required fields including Engineering Hours (must be a positive number).");
                return;
            }
            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onComboBoxChange: function(oEvent) {
            var oComboBox = oEvent.getSource();
            var sValue = oEvent.getParameter("newValue") || oComboBox.getValue();
            var aItems = oComboBox.getItems();
            var bValid = aItems.some(function(oItem) {
                return oItem.getKey() === sValue || oItem.getText() === sValue;
            });

            oComboBox.setValueState(bValid ? "None" : "Error");
            if (!bValid) {
                MessageToast.show("Please select a valid option from the dropdown.", { position: "bottom center" });
            }
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var fValue = parseFloat(sNewValue);
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            oInput.setValueState("None");

            if (isNaN(fValue) || fValue < 0) {
                oInput.setValueState("Error");
                MessageToast.show("Budget amount cannot be negative.", { position: "bottom center" });
                return;
            }

            aItems[iIndex].amount = fValue || 0;
            if (aItems[iIndex].nature === "Capital Budget") {
                aItems[iIndex].contingency = aItems[iIndex].amount * 0.05;
                aItems[iIndex].total = aItems[iIndex].amount + aItems[iIndex].contingency;
            } else {
                aItems[iIndex].contingency = 0;
                aItems[iIndex].total = aItems[iIndex].amount;
            }

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[aItems.length - 1].amount = iTotalAmount;
            aItems[aItems.length - 1].contingency = iTotalContingency;
            aItems[aItems.length - 1].total = iTotalAmount + iTotalContingency;

            this.getView().byId("BudgetValue").setValue(aItems[aItems.length - 1].total.toString());
            this._updateIRREnabledState(aItems[aItems.length - 1].total);

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
        },

        onHoursChange: function(oEvent) {
            var hours = oEvent.getSource();
            hours.setValueState("None");
            
            var value = oEvent.getParameter("value");
            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                hours.setValueState("Error");
                MessageToast.show("Engineering Hours must be a positive number.", { position: "bottom center" });
            }
        },

        onHodSanctionChange: function(oEvent) {
            var hod = this.getView().byId("Hod_SanctionData");
            hod.setValueState("None");
            this.onComboBoxChange(oEvent);
        },

        onDepartmentSanctionChange: function(oEvent) {
            var department = this.getView().byId("department_sensce");
            department.setValueState("None");
            this.onComboBoxChange(oEvent);
        },

        onMarketSenca: function(oEvent) {
            var market = this.getView().byId("comboMarket_Senca");
            market.setValueState("None");
            this.onComboBoxChange(oEvent);
        },

        onLocationSenca: function(oEvent) {
            var location = this.getView().byId("comboLocation_Senca");
            location.setValueState("None");
            this.onComboBoxChange(oEvent);
        },

        onApprovedSanctionform: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);

            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };
            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Rejected successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };
            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.amount || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.amount || 0
            };
            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Approved successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "Approved") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request Submitted successfully!", {
                        onClose: function() {
                            var Name = that._SanctionfdNameUI;
                            if (Name === "SSFD") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("DashboardUI", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                }
            });
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;
            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data
                        });
                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;
            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;
            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        },

        handleLiveChange: function(oEvent) {
            var oTextArea = oEvent.getSource();
            oTextArea.setValueState("None");
        }
    });
});


NEW CODE 1

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", total: 0 },
                    { nature: "Personnel Cost", total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            this.remarksDialog = sap.ui.xmlfragment("com/mmapprovalhub/approvalhub/Fragments/remarks", this);
            this.getView().addDependent(this.remarksDialog);
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;
                        that.stagesData = oData.results[0].stage;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", true);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            var basedNameUI = oArgs.basedNameUISSFD;
            this._SanctionfdNameUI = basedNameUI;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            this.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel");
            if (!oRequestServiceModel) {
                oRequestServiceModel = new JSONModel();
                this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            }
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onBudgetDetailDataFetch("REQ-FD-0001");
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            // First check if we have a valid reqID
    if (!reqID || reqID === "REQ-FD-0001"){
        // This is a new form or default case, initialize with empty values
        var oBudgetData = {
            items: [
                { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                { nature: "Revenue Budget", total: 0 },
                { nature: "Personnel Cost", total: 0 },
                { nature: "Total", amount: 0, contingency: 0, total: 0 }
            ]
        };
        var oBudgetModel = oView.getModel("budgetModel") || new JSONModel(oBudgetData);
        oBudgetModel.setData(oBudgetData);
        oView.setModel(oBudgetModel, "budgetModel");
        oView.byId("BudgetValue").setValue("0");
        return;
    }

            // Fetch the budget details for the given reqID
            oModelV2.read("/ReqFormFD('" + reqID + "')", {
                success: function(oData) {
                    if (!reqID || reqID === "REQ-FD-0001")  {
                        var oBudgetData = {
                            items: [
                                { 
                                    nature: "Capital Budget", 
                                    amount: oData.capitalBudget || 0, 
                                    contingency: oData.capitalBudget ? oData.capitalBudget * 0.05 : 0, 
                                    total: oData.capitalBudget ? oData.capitalBudget + (oData.capitalBudget * 0.05) : 0 
                                },
                                { nature: "Revenue Budget", total: oData.revenueBudget || 0 },
                                { nature: "Personnel Cost", total: oData.personnelCost || 0 },
                                { 
                                    nature: "Total", 
                                    amount: (oData.capitalBudget || 0) + (oData.revenueBudget || 0) + (oData.personnelCost || 0),
                                    contingency: oData.capitalBudget ? oData.capitalBudget * 0.05 : 0,
                                    total: (oData.capitalBudget || 0) + (oData.revenueBudget || 0) + (oData.personnelCost || 0) + (oData.capitalBudget ? oData.capitalBudget * 0.05 : 0)
                                }
                            ]
                        };
                        var oBudgetModel = oView.getModel("budgetModel");
                        oBudgetModel.setData(oBudgetData);
                        oBudgetModel.refresh(true);
                        oView.byId("BudgetValue").setValue(oBudgetData.items[oBudgetData.items.length - 1].total.toString());
                    } else {
                        MessageToast.show("No budget data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load budget data.", { position: "bottom center" });
                }
            });
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                }
            });
        },

        onDashboardui: function() {
            var Approved = this._ApprovedCheck;
            if (Approved === "Approved") {
                var oRouter = this.getOwnerComponent().getRouter();
                oRouter.navTo("approverdashboard", {});
            } else {
                var Name = this._SanctionfdNameUI;
                if (Name === "SSFD") {
                    var oRouter = this.getOwnerComponent().getRouter();
                    oRouter.navTo("DashboardUI", {
                        Name: "SSFD"
                    });
                }
            }
        },

        onBackDashboardpage: function() {
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments");
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            if (aFilesData) {
                aFilesData.forEach(function(file) {
                    if (!file.fileName || file.uploaded) return;

                    if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                        var base64Content = file.content.split(',')[1];
                        var payload = {
                            fileName: file.fileName,
                            content: base64Content,
                            mediaType: file.mimeType || "text/plain",
                            reqID: reqid
                        };

                        oModel.create("/ReqAttachments", payload, {
                            success: function() {
                                file.uploaded = true;
                            },
                            error: function() {
                                MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            }
                        });
                    }
                });
            }
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData;
            var satauscheckdata = "";
            if (statusData === "" || statusData === null || statusData === undefined) {
                satauscheckdata = "Draft";
            } else if (statusData === "Draft") {
                satauscheckdata = "Draft";
            } else if (statusData === "Pending") {
                satauscheckdata = "Pending";
            }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            if (!this._reqIDData) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request saved successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request Updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                referenceNumber: oView.byId("inputRefNumber").getValue(),
                location: oView.byId("comboLocation").getSelectedKey(),
                budget: oView.byId("inputBudget").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("Division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("Department").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket").getSelectedKey(),
                hod: oView.byId("Hod").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                expectedOutcome: oView.byId("_IDGenTextArea2").getValue(),
                attachments: this.getView().getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved: " + JSON.stringify(oFormData), { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;

            var location = this.getView().byId("comboLocation_Senca");
            var department = this.getView().byId("department_sensce");
            var market = this.getView().byId("comboMarket_Senca");
            var hod = this.getView().byId("Hod_SanctionData");
            var hours = this.getView().byId("inputHour");

            location.setValueState("None");
            department.setValueState("None");
            market.setValueState("None");
            hod.setValueState("None");
            hours.setValueState("None");

            if (!location.getValue()) {
                location.setValueState("Error");
                isValid = false;
            }
            if (!department.getValue()) {
                department.setValueState("Error");
                isValid = false;
            }
            if (!market.getValue()) {
                market.setValueState("Error");
                isValid = false;
            }
            if (!hod.getValue()) {
                hod.setValueState("Error");
                isValid = false;
            }
            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                isValid = false;
            }

            if (!isValid) {
                MessageBox.error("Please fill all required fields including Engineering Hours (must be a positive number).");
                return;
            }
            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onHoursChange: function(oEvent) {
            var hours = oEvent.getSource();
            hours.setValueState("None");
            
            var value = oEvent.getParameter("value");
            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                hours.setValueState("Error");
            }
        },

        onHodSanctionChange: function() {
            var hod = this.getView().byId("Hod_SanctionData");
            hod.setValueState("None");
        },

        onDepartmentSanctionChange: function() {
            var DepartmentSan = this.getView().byId("department_sensce");
            DepartmentSan.setValueState("None");
        },

        onMarketSenca: function() {
            var comboMarket_Senca = this.getView().byId("comboMarket_Senca");
            comboMarket_Senca.setValueState("None");
        },

        onLocationSenca: function() {
            var comboLocation_Senca = this.getView().byId("comboLocation_Senca");
            comboLocation_Senca.setValueState("None");
        },

        onApprovedSanctionform: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);

            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Rejected successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "APPROVE") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Approved successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "APPROVE") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request Submitted successfully!", {
                        onClose: function() {
                            var Name = that._SanctionfdNameUI;
                            if (Name === "SSFD") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("DashboardUI", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                }
            });
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            oInput.setValueState("None");

            aItems[iIndex].amount = parseFloat(sNewValue) || 0;
            if (aItems[iIndex].nature === "Capital Budget") {
                aItems[iIndex].contingency = aItems[iIndex].amount * 0.05;
                aItems[iIndex].total = aItems[iIndex].amount + aItems[iIndex].contingency;
            } else {
                aItems[iIndex].contingency = 0;
                aItems[iIndex].total = aItems[iIndex].amount;
            }

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || aItems[i].total || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[aItems.length - 1].amount = iTotalAmount;
            aItems[aItems.length - 1].contingency = iTotalContingency;
            aItems[aItems.length - 1].total = iTotalAmount + iTotalContingency;

            this.getView().byId("BudgetValue").setValue(aItems[aItems.length - 1].total.toString());

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;
            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data
                        });
                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;
            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;
            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        }
    });
});



NEW CODE 

sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/core/Fragment",
    "sap/m/MessageBox"
], function(Controller, JSONModel, MessageToast, Fragment, MessageBox) {
    "use strict";
    return Controller.extend("com.mmapprovalhub.approvalhub.controller.Sanctionfd", {
        onInit: function() {
            var oBudgetData = {
                items: [
                    { nature: "Capital Budget", amount: 0, contingency: 0, total: 0 },
                    { nature: "Revenue Budget", total: 0 },
                    { nature: "Personnel Cost", total: 0 },
                    { nature: "Total", amount: 0, contingency: 0, total: 0 }
                ]
            };
            var oBudgetModel = new JSONModel(oBudgetData);
            this.getView().setModel(oBudgetModel, "budgetModel");
            var oAttachmentData = {
                attachments: []
            };
            var oAttachmentModel = new JSONModel(oAttachmentData);
            this.getView().setModel(oAttachmentModel, "UploadDocSrvTabData");
            var oRouter = sap.ui.core.UIComponent.getRouterFor(this);
            oRouter.getRoute("Sanctionfd").attachPatternMatched(this._onRouteSanctionfdController, this);
            oRouter.getRoute("SanctionfdRef").attachPatternMatched(this._onRouteSanctionfdwithRef, this);
            oRouter.getRoute("SanctionfdRefApproved").attachPatternMatched(this._onRouteSanctionfdApproved, this);

            this.remarksDialog = sap.ui.xmlfragment("com/mmapprovalhub/approvalhub/Fragments/remarks", this);
            this.getView().addDependent(this.remarksDialog);
            var oViewModel = new JSONModel({
                enableRowActions: true,
                approvebuttonvisiblity: false,
                approvebuttonfragment: false,
                rejetedbuttonfragmnet: false
            });
            this.getView().setModel(oViewModel, "viewenableddatacheck");

            var oTimelineData = {
                timelineItems: [
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ankit Pathak Created a Request",
                        text: "Data Save",
                        userName: "Ankit Pathak",
                        userPicture: "https://ui-avatars.com/api/?name=Ankit+Rath"
                    },
                    {
                        dateTime: "7/22/2016 at 6:00 PM",
                        title: "Yugal Created a Request",
                        text: "Data Submit",
                        userName: "Yugal",
                        userPicture: "https://ui-avatars.com/api/?name=Yugal"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Ayushi Mam added a note [Approved]",
                        text: "Submitted.",
                        userName: "Ayushi Mam",
                        userPicture: "https://ui-avatars.com/api/?name=Ayushi"
                    },
                    {
                        dateTime: "7/22/2016 at 3:00 PM",
                        title: "Aakib Mohd added a note [Approved]",
                        text: "Done.",
                        userName: "Aakib Mohd",
                        userPicture: "https://ui-avatars.com/api/?name=Aakib+Mohd"
                    }
                ]
            };
            var oTimelineModel = new JSONModel(oTimelineData);
            this.getView().setModel(oTimelineModel, "timelineModel");
        },

        _onRouteSanctionfdApproved: function(oEvent) {
            this._ApprovedCheck = "";
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = oArgs.approved;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;
                        that.stagesData = oData.results[0].stage;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        if (that._ApprovedCheck === "Approved" && (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD")) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", true);
                        } else {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdwithRef: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            this._SanctionfdNameUI = oArgs.basedNameUISSFD;
            var reqID = oArgs.reqID;
            this._reqIDData = reqID;
            this._ApprovedCheck = "";
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            oModelV2.read("/Requests", {
                urlParameters: {
                    "$filter": "reqID eq '" + reqID + "'",
                    "$expand": "ssfdDtl"
                },
                success: function(oData) {
                    if (oData && oData.results.length > 0) {
                        let oRequestServiceModel = that.getOwnerComponent().getModel("Requestservicemodel");
                        if (!oRequestServiceModel) {
                            oRequestServiceModel = new JSONModel();
                            that.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
                        }
                        oRequestServiceModel.setData(oData.results[0]);
                        var statusDatacheck = oData.results[0].status;
                        that.statusData = oData.results[0].status;

                        if (statusDatacheck === "Draft" || statusDatacheck === "" || statusDatacheck === null) {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Pending" || statusDatacheck === "Pending At HOD") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        } else if (statusDatacheck === "Approved") {
                            that.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", false);
                            that.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonvisiblity", false);
                        }

                        that.onDepartmentDataFetch();
                        that.onMarketDataFetch();
                        that.onLocationDataFetch();
                        that.onHODDataFetch();
                        that.onFetchTimelinessData();
                        that.onAttchmentDataFetch();
                        that.onBudgetDetailDataFetch(reqID);
                    } else {
                        MessageToast.show("No data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load request data.", { position: "bottom center" });
                }
            });
        },

        _onRouteSanctionfdController: function(oEvent) {
            var oArgs = oEvent.getParameter("arguments");
            var basedNameUI = oArgs.basedNameUISSFD;
            this._SanctionfdNameUI = basedNameUI;
            this._reqIDData = "";
            this._ApprovedCheck = "";
            this.getView().getModel("viewenableddatacheck").setProperty("/enableRowActions", true);

            var oRequestServiceModel = this.getOwnerComponent().getModel("Requestservicemodel");
            if (!oRequestServiceModel) {
                oRequestServiceModel = new JSONModel();
                this.getOwnerComponent().setModel(oRequestServiceModel, "Requestservicemodel");
            }
            var oEmptyData = {
                reqID: "",
                refNo: "",
                requesterName: "",
                department: "",
                market: "",
                location: "",
                hod: "",
                ssfdDtl: []
            };
            oRequestServiceModel.setData(oEmptyData);
            this.onDepartmentDataFetch();
            this.onMarketDataFetch();
            this.onLocationDataFetch();
            this.onHODDataFetch();
            this.onBudgetDetailDataFetch("REQ-FD-0001");
        },

        onBudgetDetailDataFetch: function(reqID) {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;

            // Fetch the budget details for the given reqID
            oModelV2.read("/ReqFormFD('REQ-FD-0001')('" + reqID + "')", {
                success: function(oData) {
                    if (oData) {
                        var oBudgetData = {
                            items: [
                                { 
                                    nature: "Capital Budget", 
                                    amount: oData.capitalBudget || 0, 
                                    contingency: oData.capitalBudget ? oData.capitalBudget * 0.05 : 0, 
                                    total: oData.capitalBudget ? oData.capitalBudget + (oData.capitalBudget * 0.05) : 0 
                                },
                                { nature: "Revenue Budget", total: oData.revenueBudget || 0 },
                                { nature: "Personnel Cost", total: oData.personnelCost || 0 },
                                { 
                                    nature: "Total", 
                                    amount: (oData.capitalBudget || 0) + (oData.revenueBudget || 0) + (oData.personnelCost || 0),
                                    contingency: oData.capitalBudget ? oData.capitalBudget * 0.05 : 0,
                                    total: (oData.capitalBudget || 0) + (oData.revenueBudget || 0) + (oData.personnelCost || 0) + (oData.capitalBudget ? oData.capitalBudget * 0.05 : 0)
                                }
                            ]
                        };
                        var oBudgetModel = oView.getModel("budgetModel");
                        oBudgetModel.setData(oBudgetData);
                        oBudgetModel.refresh(true);
                        oView.byId("BudgetValue").setValue(oBudgetData.items[oBudgetData.items.length - 1].total.toString());
                    } else {
                        MessageToast.show("No budget data found for Req ID: " + reqID, { position: "bottom center" });
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load budget data.", { position: "bottom center" });
                }
            });
        },

        onFetchTimelinessData: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ProcessLogs", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "timelinesslogdata");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onAttchmentDataFetch: function() {
            var reqid = this._reqIDData;
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");

            oModelV2.read("/ReqAttachments", {
                filters: [
                    new sap.ui.model.Filter("reqID", sap.ui.model.FilterOperator.EQ, reqid)
                ],
                success: function(oData) {
                    if (oData && oData.results) {
                        var oJSONModel = new JSONModel({
                            attachments: oData.results
                        });
                        oView.setModel(oJSONModel, "UploadDocSrvTabData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load attachment data.", { position: "bottom center" });
                    console.error(oError);
                }
            });
        },

        onHODDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/Approvers", {
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSHODDatafetchsanc");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load HOD data.", { position: "bottom center" });
                }
            });
        },

        onDepartmentDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_DEPARTMENT'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSDEPARTMENTData");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load department data.", { position: "bottom center" });
                }
            });
        },

        onMarketDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_MARKET'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSMARKETDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load market data.", { position: "bottom center" });
                }
            });
        },

        onLocationDataFetch: function() {
            var oView = this.getView();
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            oModelV2.read("/ControlValues", {
                urlParameters: {
                    "$filter": "category eq 'SS_LOCATION'"
                },
                success: function(oData) {
                    if (oData) {
                        var oJSONModel = new JSONModel(oData);
                        oView.setModel(oJSONModel, "SSLOCATIONDataFetch");
                    }
                },
                error: function(oError) {
                    MessageToast.show("Failed to load location data.", { position: "bottom center" });
                }
            });
        },

        onDashboardui: function() {
            var Approved = this._ApprovedCheck;
            if (Approved === "Approved") {
                var oRouter = this.getOwnerComponent().getRouter();
                oRouter.navTo("approverdashboard", {});
            } else {
                var Name = this._SanctionfdNameUI;
                if (Name === "SSFD") {
                    var oRouter = this.getOwnerComponent().getRouter();
                    oRouter.navTo("DashboardUI", {
                        Name: "SSFD"
                    });
                }
            }
        },

        onBackDashboardpage: function() {
            MessageToast.show("Navigating back to dashboard...", { position: "bottom center" });
        },

        attachmentuploadFilesData: function(reqid) {
            var oModelTabdata = this.getView().getModel("UploadDocSrvTabData");
            var aFilesData = oModelTabdata.getProperty("/attachments");
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");

            if (aFilesData) {
                aFilesData.forEach(function(file) {
                    if (!file.fileName || file.uploaded) return;

                    if (file.content && typeof file.content === "string" && file.content.includes(',')) {
                        var base64Content = file.content.split(',')[1];
                        var payload = {
                            fileName: file.fileName,
                            content: base64Content,
                            mediaType: file.mimeType || "text/plain",
                            reqID: reqid
                        };

                        oModel.create("/ReqAttachments", payload, {
                            success: function() {
                                file.uploaded = true;
                            },
                            error: function() {
                                MessageToast.show("Error uploading attachment: " + file.fileName, { position: "bottom center" });
                            }
                        });
                    }
                });
            }
        },

        onSaveSanctionform: function() {
            var oView = this.getView();
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var reqid = this._reqIDData;
            var statusData = this.statusData;
            var satauscheckdata = "";
            if (statusData === "" || statusData === null || statusData === undefined) {
                satauscheckdata = "Draft";
            } else if (statusData === "Draft") {
                satauscheckdata = "Draft";
            } else if (statusData === "Pending") {
                satauscheckdata = "Pending";
            }

            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: "",
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };

            var oSavePayload = {
                stage: satauscheckdata,
                status: satauscheckdata,
                type: "SSFD",
                remarks: "",
                ssfdDtl: oSsfdDtl
            };

            var that = this;
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            if (!this._reqIDData) {
                oModel.create("/Requests", oSavePayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request saved successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSavePayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        MessageBox.success("Request Updated successfully!");
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onConfirmSave: function() {
            var oView = this.getView();
            var oFormData = {
                referenceNumber: oView.byId("inputRefNumber").getValue(),
                location: oView.byId("comboLocation").getSelectedKey(),
                budget: oView.byId("inputBudget").getValue(),
                implementDate: oView.byId("dateImplement").getValue(),
                division: oView.byId("Division").getSelectedKey(),
                projectName: oView.byId("inputProjectName").getValue(),
                irr: oView.byId("inputIRR").getValue(),
                department: oView.byId("Department").getSelectedKey(),
                itemRequired: oView.byId("inputItemRequired").getValue(),
                market: oView.byId("comboMarket").getSelectedKey(),
                hod: oView.byId("Hod").getSelectedKey(),
                date: oView.byId("dateField").getValue(),
                hour: oView.byId("inputHour").getValue(),
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                expectedOutcome: oView.byId("_IDGenTextArea2").getValue(),
                attachments: this.getView().getModel("UploadDocSrvTabData").getProperty("/attachments")
            };
            MessageToast.show("Form data and attachments saved: " + JSON.stringify(oFormData), { position: "bottom center" });
            this._oSaveDialog.close();
        },

        onCancelSave: function() {
            this._oSaveDialog.close();
            MessageToast.show("Save action canceled.", { position: "bottom center" });
        },

        onSubmitSanctionform: function() {
            var isValid = true;

            var location = this.getView().byId("comboLocation_Senca");
            var department = this.getView().byId("department_sensce");
            var market = this.getView().byId("comboMarket_Senca");
            var hod = this.getView().byId("Hod_SanctionData");
            var hours = this.getView().byId("inputHour");

            location.setValueState("None");
            department.setValueState("None");
            market.setValueState("None");
            hod.setValueState("None");
            hours.setValueState("None");

            if (!location.getValue()) {
                location.setValueState("Error");
                isValid = false;
            }
            if (!department.getValue()) {
                department.setValueState("Error");
                isValid = false;
            }
            if (!market.getValue()) {
                market.setValueState("Error");
                isValid = false;
            }
            if (!hod.getValue()) {
                hod.setValueState("Error");
                isValid = false;
            }
            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                isValid = false;
            }

            if (!isValid) {
                MessageBox.error("Please fill all required fields including Engineering Hours (must be a positive number).");
                return;
            }
            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onHoursChange: function(oEvent) {
            var hours = oEvent.getSource();
            hours.setValueState("None");
            
            var value = oEvent.getParameter("value");
            if (!value || isNaN(parseFloat(value)) || parseFloat(value) <= 0) {
                hours.setValueState("Error");
            }
        },

        onHodSanctionChange: function() {
            var hod = this.getView().byId("Hod_SanctionData");
            hod.setValueState("None");
        },

        onDepartmentSanctionChange: function() {
            var DepartmentSan = this.getView().byId("department_sensce");
            DepartmentSan.setValueState("None");
        },

        onMarketSenca: function() {
            var comboMarket_Senca = this.getView().byId("comboMarket_Senca");
            comboMarket_Senca.setValueState("None");
        },

        onLocationSenca: function() {
            var comboLocation_Senca = this.getView().byId("comboLocation_Senca");
            comboLocation_Senca.setValueState("None");
        },

        onApprovedSanctionform: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", true);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", false);

            this.remarksDialog.open();
        },

        onRejectDataSanctionForm: function() {
            var hours = this.getView().byId("inputHour");
            hours.setValueState("None");

            if (!hours.getValue() || isNaN(parseFloat(hours.getValue())) || parseFloat(hours.getValue()) <= 0) {
                hours.setValueState("Error");
                MessageBox.error("Please enter valid Engineering Hours (must be a positive number).");
                return;
            }

            sap.ui.getCore().byId("RemarkInput").setValue("");
            this.getView().getModel("viewenableddatacheck").setProperty("/approvebuttonfragment", false);
            this.getView().getModel("viewenableddatacheck").setProperty("/rejetedbuttonfragmnet", true);

            this.remarksDialog.open();
        },

        onCloseReamrksFrag: function() {
            this.remarksDialog.close();
        },

        onRejectedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Rejected",
                status: "Rejected",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.rejecteddatacheckRejected(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        rejecteddatacheckRejected: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "REJECT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Rejected successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "APPROVE") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error rejecting request.", { position: "bottom center" });
                }
            });
        },

        onApprovedData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Approved",
                status: "Approved",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.approverdatacheckApproved(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        onSubmitReamrksData: function() {
            var oView = this.getView();
            var reqid = this._reqIDData;
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            if (RemarkInput === "") {
                MessageBox.information("Please provide a remark before submitting.");
                return;
            }
            var aBudgetItems = oView.getModel("budgetModel").getProperty("/items");
            var oSsfdDtl = {
                division: oView.byId("division").getSelectedKey(),
                puDept: oView.byId("department_sensce").getSelectedKey(),
                hod: oView.byId("Hod_SanctionData").getSelectedKey(),
                loc: oView.byId("comboLocation_Senca").getSelectedKey(),
                projName: oView.byId("inputProjectName").getValue(),
                itemRequiredDesc: oView.byId("inputItemRequired").getValue(),
                budgetRequired: parseFloat(oView.byId("BudgetValue").getValue()) || 0,
                irr: oView.byId("inputIRR").getValue(),
                market: oView.byId("comboMarket_Senca").getSelectedKey(),
                implDt: oView.byId("dateImplement").getDateValue(),
                enggHours: oView.byId("inputHour").getValue(),
                remarks: RemarkInput,
                background: oView.byId("_IDGenTextArea").getValue(),
                justification: oView.byId("_IDGenTextArea1").getValue(),
                deliverables: oView.byId("_IDGenTextArea2").getValue(),
                capitalBudget: aBudgetItems.find(item => item.nature === "Capital Budget")?.amount || 0,
                revenueBudget: aBudgetItems.find(item => item.nature === "Revenue Budget")?.total || 0,
                personnelCost: aBudgetItems.find(item => item.nature === "Personnel Cost")?.total || 0
            };
            var oSubmitPayload = {
                stage: "Pending",
                status: "Pending At HOD",
                type: "SSFD",
                remarks: RemarkInput,
                ssfdDtl: oSsfdDtl
            };
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var that = this;
            if (!this._reqIDData) {
                oModel.create("/Requests", oSubmitPayload, {
                    success: function(oData) {
                        that._reqIDData = oData.reqID;
                        var reqid = oData.reqID;
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                        if (oData) {
                            var oComponent = that.getOwnerComponent();
                            var oRequestServiceModel = oComponent.getModel("Requestservicemodel");
                            if (!oRequestServiceModel) {
                                oRequestServiceModel = new JSONModel();
                                oComponent.setModel(oRequestServiceModel, "Requestservicemodel");
                            }
                            oRequestServiceModel.setData(oData);
                        }
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            } else {
                oModel.update("/Requests('" + reqid + "')", oSubmitPayload, {
                    success: function(oData) {
                        that.attachmentuploadFilesData(reqid);
                        that.approverdatacheck(reqid);
                    },
                    error: function(oError) {
                        MessageToast.show("Error saving request: " + oError.message, { position: "bottom center" });
                    }
                });
            }
        },

        approverdatacheckApproved: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "APPROVE",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success("Request Approved successfully!", {
                        onClose: function() {
                            var Approved = that._ApprovedCheck;
                            if (Approved === "APPROVE") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("approverdashboard");
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error approving request.", { position: "bottom center" });
                }
            });
        },

        approverdatacheck: function(reqid) {
            var oModel = this.getOwnerComponent().getModel("approvalservicev2");
            var RemarkInput = sap.ui.getCore().byId("RemarkInput").getValue();
            var oApprovedPayload = {
                reqID: reqid,
                action: "SUBMIT",
                remarks: RemarkInput
            };
            var that = this;
            oModel.create("/SSFDApproval", oApprovedPayload, {
                success: function(oData) {
                    MessageBox.success(oData.SSFDApproval?.message || "Request Submitted successfully!", {
                        onClose: function() {
                            var Name = that._SanctionfdNameUI;
                            if (Name === "SSFD") {
                                var oRouter = that.getOwnerComponent().getRouter();
                                oRouter.navTo("DashboardUI", {
                                    Name: "SSFD"
                                });
                            }
                        }
                    });
                },
                error: function(oError) {
                    MessageToast.show("Error submitting request.", { position: "bottom center" });
                }
            });
        },

        onBudgetAmountChange: function(oEvent) {
            var oInput = oEvent.getSource();
            var sNewValue = oEvent.getParameter("value");
            var oModel = this.getView().getModel("budgetModel");
            var sPath = oInput.getBinding("value").getPath();
            var oContext = oInput.getBindingContext("budgetModel");
            var iIndex = parseInt(oContext.getPath().split("/").pop());
            var aItems = oModel.getProperty("/items");

            oInput.setValueState("None");

            aItems[iIndex].amount = parseFloat(sNewValue) || 0;
            if (aItems[iIndex].nature === "Capital Budget") {
                aItems[iIndex].contingency = aItems[iIndex].amount * 0.05;
                aItems[iIndex].total = aItems[iIndex].amount + aItems[iIndex].contingency;
            } else {
                aItems[iIndex].contingency = 0;
                aItems[iIndex].total = aItems[iIndex].amount;
            }

            var iTotalAmount = 0;
            var iTotalContingency = 0;
            for (var i = 0; i < aItems.length - 1; i++) {
                iTotalAmount += aItems[i].amount || aItems[i].total || 0;
                iTotalContingency += aItems[i].contingency || 0;
            }

            aItems[aItems.length - 1].amount = iTotalAmount;
            aItems[aItems.length - 1].contingency = iTotalContingency;
            aItems[aItems.length - 1].total = iTotalAmount + iTotalContingency;

            this.getView().byId("BudgetValue").setValue(aItems[aItems.length - 1].total.toString());

            oModel.setProperty("/items", aItems);
            oModel.refresh(true);
        },

        onUploadTabAttchmment: function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFiles = oEvent.getParameter("files");
            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("No files selected.", { position: "bottom center" });
                return;
            }
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;
            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            mimeType: file.type,
                            content: sBase64Data
                        });
                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Files uploaded: " + aFiles.length, { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onUploadPress: function() {
            var oFileUploader = this.byId("fileUploaderTabAttchment");
            var aFiles = oFileUploader.getDomRef().files;

            if (!aFiles || aFiles.length === 0) {
                MessageToast.show("Please select at least one file first.", { position: "bottom center" });
                return;
            }

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var sUploadedOn = new Date().toISOString().split("T")[0];
            var that = this;

            aAttachments = aAttachments.filter(function(item) {
                return !item.temp;
            });

            for (var i = 0; i < aFiles.length; i++) {
                (function(file, index) {
                    var oReader = new FileReader();
                    oReader.onload = function(e) {
                        var sBase64Data = e.target.result;
                        aAttachments.push({
                            ID: new Date().getTime().toString() + index,
                            fileName: file.name,
                            uploadedBy: "Current User",
                            uploadedOn: sUploadedOn,
                            deleteTabVisible: true,
                            content: sBase64Data
                        });

                        if (index === aFiles.length - 1) {
                            oModel.setProperty("/attachments", aAttachments);
                            oModel.refresh(true);
                            MessageToast.show("Uploaded " + aFiles.length + " file(s) successfully!", { position: "bottom center" });
                            oFileUploader.setValue("");
                        }
                    };
                    oReader.onerror = function() {
                        MessageToast.show("Error reading file: " + file.name, { position: "bottom center" });
                    };
                    oReader.readAsDataURL(file);
                })(aFiles[i], i);
            }
        },

        onDownloadTabAttachemnt: function(oEvent) {
            var oButton = oEvent.getSource();
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var sFileName = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "fileName";
            }).getValue();

            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments") || [];
            var oAttachment = aAttachments.find(function(oItem) {
                return oItem.ID === sID;
            });

            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;

            oModelV2.read(sPath, {
                success: function(oData) {
                    if (oData && oData.__metadata && oData.__metadata.media_src) {
                        var oLink = document.createElement("a");
                        oLink.href = oData.__metadata.media_src;
                        oLink.download = sFileName;
                        document.body.appendChild(oLink);
                        oLink.click();
                        document.body.removeChild(oLink);
                        MessageToast.show("Downloading file from server: " + sFileName, { position: "bottom center" });
                    } else {
                        that._downloadLocalAttachment(oAttachment, sFileName);
                    }
                },
                error: function() {
                    that._downloadLocalAttachment(oAttachment, sFileName);
                }
            });
        },

        _downloadBase64File: function(sBase64Content, sFileName) {
            try {
                var sBase64Data = sBase64Content.split(',')[1];
                var sMimeType = sBase64Content.split(';')[0].split(':')[1];
                var byteCharacters = atob(sBase64Data);
                var byteNumbers = new Array(byteCharacters.length);
                for (var i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                var oBlob = new Blob([byteArray], { type: sMimeType });
                var sUrl = URL.createObjectURL(oBlob);

                var oLink = document.createElement("a");
                oLink.href = sUrl;
                oLink.download = sFileName;
                document.body.appendChild(oLink);
                oLink.click();
                document.body.removeChild(oLink);
                URL.revokeObjectURL(sUrl);
                MessageToast.show("Downloading file: " + sFileName, { position: "bottom center" });
            } catch (e) {
                MessageToast.show("Error downloading file: " + sFileName, { position: "bottom center" });
            }
        },

        _downloadLocalAttachment: function(oAttachment, sFileName) {
            if (!oAttachment || !oAttachment.content) {
                MessageToast.show("Local file content not found for: " + sFileName, { position: "bottom center" });
                return;
            }
            this._downloadBase64File(oAttachment.content, sFileName);
        },

        onDeleteTabAttchment: function(oEvent) {
            var oButton = oEvent.getSource();
            var oModel = this.getView().getModel("UploadDocSrvTabData");
            var aAttachments = oModel.getProperty("/attachments");
            var sID = oButton.getCustomData().find(function(oData) {
                return oData.getKey() === "ID";
            }).getValue();
            var iIndex = aAttachments.findIndex(function(oItem) {
                return oItem.ID === sID;
            });
            if (iIndex === -1) return;
            var sFileName = aAttachments[iIndex].fileName;
            var oModelV2 = this.getOwnerComponent().getModel("approvalservicev2");
            var sPath = "/ReqAttachments(guid'" + sID + "')";
            var that = this;
            oModelV2.remove(sPath, {
                success: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                },
                error: function() {
                    that._removeAttachmentFromLocalModel(oModel, aAttachments, iIndex, sFileName);
                    MessageToast.show("Deleted " + sFileName, { position: "bottom center" });
                }
            });
        },

        _removeAttachmentFromLocalModel: function(oModel, aAttachments, iIndex, sFileName) {
            aAttachments.splice(iIndex, 1);
            oModel.setProperty("/attachments", aAttachments);
            oModel.refresh(true);
        }
    });
});
